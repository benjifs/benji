[
  {
    "type": "entry",
    "author": {
      "type": "card",
      "name": "",
      "photo": "",
      "url": "https://reillyspitzfaden.com"
    },
    "url": "https://reillyspitzfaden.com/notes/2025/01/thanks-for-the-info/",
    "published": "2025-01-28T00:00:00",
    "wm-received": "2025-01-28T21:02:36Z",
    "wm-id": 1880933,
    "wm-source": "https://reillyspitzfaden.com/notes/2025/01/thanks-for-the-info/",
    "wm-target": "https://www.benji.dog/notes/1738091887/",
    "wm-protocol": "webmention",
    "name": "Thanks for the info!",
    "syndication": [
      "https://reillyspitzfaden.com/notes/2025/01/thanks-for-the-info/"
    ],
    "content": {
      "html": "<blockquote>\n<p>Reply to <a class=\"u-in-reply-to\" href=\"https://www.benji.dog/notes/1738091887/\">https://www.benji.dog/notes/1738091887/</a></p>\n</blockquote>\n<p>Thanks for the info! This looks like exactly what I was interested in doing next, and I'll have a look at it.</p>",
      "text": "Reply to https://www.benji.dog/notes/1738091887/\n\nThanks for the info! This looks like exactly what I was interested in doing next, and I'll have a look at it."
    },
    "in-reply-to": "https://www.benji.dog/notes/1738091887/",
    "wm-property": "in-reply-to",
    "wm-private": false,
    "rels": {
      "canonical": "https://reillyspitzfaden.com/notes/2025/01/thanks-for-the-info/"
    }
  },
  {
    "type": "entry",
    "author": {
      "type": "card",
      "name": "Reilly Spitzfaden",
      "photo": "https://avatars.webmention.io/reillyspitzfaden.com/10ca64df4721d256914c260109486f3051ac27b5586304a64c6c90d776cd6146.jpg",
      "url": "https://reillyspitzfaden.com"
    },
    "url": "https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/",
    "published": "2025-05-12T00:00:00",
    "wm-received": "2025-05-12T20:49:13Z",
    "wm-id": 1910732,
    "wm-source": "https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/",
    "wm-target": "https://www.benji.dog/notes/1738091887/",
    "wm-protocol": "webmention",
    "name": "A Quick Guide to Everything I Know about Webmentions",
    "syndication": [
      "https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/"
    ],
    "content": {
      "html": "<p>Please feel free to use the table of contents to skip around — individual sections can be read on their own as mini-tutorials on a topic!</p>\n<p><a href=\"https://indieweb.org/Webmention\">Webmentions</a> are <a href=\"https://amberwilson.co.uk/blog/grow-the-indieweb-with-webmentions/\">great</a>! They're a way that personal websites can interact with each other — you can notify another site when you link to them, and receive notifications when someone links to you. I find them to allow for some of the nicer parts of social interaction on the web, but with much more agency and much less inflammatory or harmful material than something like Facebook or Instagram. However, then can also be a bit intimidating, especially for <a href=\"https://tracydurnell.com/2025/01/09/sanding-off-friction-from-indie-web-connection/\">non-developers</a>.</p>\n\n<p>My goal with this tutorial is that people with a wide range of experience with coding/working in a command line — including no experience — can benefit from it. In particular, if you just read the first two sections, you'll be able to use webmentions by signing up for two services (GitHub and Webmention.io) and adding two lines of HTML to your site:</p>\n<pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>me<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://github.com/reillypascal<span>\"</span></span> <span>/&gt;</span></span>\n<span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>webmention<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://webmention.io/reillyspitzfaden.com/webmention<span>\"</span></span> <span>/&gt;</span></span></code></pre>\n<p>This even works with tools like Squarespace or Wordpress! Beyond that, each section builds on the last, so depending on how much you're comfortable with and/or interested in, you can choose your own adventure. For people with coding experience, I have some fun discussion of parsing and displaying webmentions as comments on your site; automating the process of bringing them into your site without client-side JavaScript; and using tools like <a href=\"https://brid.gy/\">Bridgy</a> to get Fediverse interactions as mentions.</p>\n<p>Here are the tools we'll be using:</p>\n<ul><li><a href=\"https://webmention.io/\">Webmention.io</a> — this is the only strictly necessary one. It's a service by <a href=\"https://aaronparecki.com/\">Aaron Parecki</a> to receive and transmit webmentions so you don't have to run your own server.\n<ul><li>The easiest way to log in to Webmention.io does require a trusted third party account such as <a href=\"https://github.com/\">GitHub</a>. You don't actually have to <em>do</em> anything with your GitHub account though — as long as it exists and you can log in, you're good.</li>\n</ul></li>\n<li><a href=\"https://www.11ty.dev/\">Eleventy</a> — the static site generator I use to build my site, although you can do the basics of this on any site setup.</li>\n<li><a href=\"https://www.netlify.com/\">Netlify</a> — the hosting service I use. I use their <a href=\"https://docs.netlify.com/configure-builds/build-hooks/\">build hooks</a> to instruct my site to rebuild nightly and pull in new mentions.</li>\n<li><a href=\"https://brid.gy/\">Bridgy</a> — if you share a post from your site on Mastodon/Bluesky/etc., this service can turn interactions with that post into webmentions that go to your site. You can then display these as comments on your blog.</li>\n</ul><p>If you have any trouble, the folks on the <a href=\"https://chat.indieweb.org/\">IndieWeb Chat</a> are extremely helpful — you can ask them questions at the link, and the link also includes Discord/Slack versions of the chatroom if that's more your style.</p>\n<p>Let's get started!</p>\n<h3>The Basics with Webmention.io</h3>\n<p>As I mentioned in my <a href=\"https://reillyspitzfaden.com/posts/2024/05/receiving-webmentions-part-1/\">first post</a> on the topic, to start, go to <a href=\"http://webmention.io/\">Webmention.io</a> and sign in using your site URL. You'll need a tag in the <code>&lt;head&gt;</code> of your site that looks something like this: <code>&lt;link rel=\"me\" href=\"https://github.com/reillypascal\" /&gt;</code>. Substitute the URL in the <code>href=\"\"</code> field with your own GitHub profile URL. This allows you to use your website to sign in to Webmention.io, with your GitHub page acting as a trusted third party to verify your identity.</p>\n<p>Once you're logged in, you can go to the “sites” tab of your dashboard (<a href=\"https://webmention.io/settings/sites\">https://webmention.io/settings/sites</a>) and enter your site in the “Create a new Site” field. This tripped me up the first time through, but Aaron <a href=\"https://github.com/aaronpk/webmention.io/issues/182\">mentioned</a> he didn't want Webmention.io to automatically accept mentions for people who hadn't asked for them, so you have to manually add the site after signing in.</p>\n<p>Once you've added it, you can click “Get Setup Code” next to your site (should be available on your “<a href=\"https://webmention.io/settings/sites\">sites</a>” tab after adding the URL). This will generate a tag you can copy and paste into the <code>&lt;head&gt;</code> element of your page — something like <code>&lt;link rel=\"webmention\" href=\"https://webmention.io/reillyspitzfaden.com/webmention\" /&gt;</code>. You can also just copy my example here, replacing “<a href=\"http://reillyspitzfaden.com\">reillyspitzfaden.com</a>” with your own URL. You're now ready to go!</p>\n<p>If you want to stop here, you can simply link to the endpoint for your site — should look like <a href=\"https://webmention.io/reillyspitzfaden.com/webmention\">https://webmention.io/reillyspitzfaden.com/webmention</a>, or in other words, the URL you put in the <code>href=\"\"</code> field above. People can send you webmentions by putting their post link in the “Source URL” field and your post link in the “Target URL” one. You can view your mentions by going to the dashboard on Webmention.io — <a href=\"https://webmention.io/dashboard\">https://webmention.io/dashboard</a> — while signed in.</p>\n<p>If you want to validate that your mentions are working properly, you can use <a href=\"https://webmention.rocks/\">webmention.rocks</a>, which has a list of tests you can run, with helpful feedback.</p>\n<p>In summary: two lines of HTML in the <code>&lt;head&gt;</code> tag, plus a link to your endpoint on each post is plenty to get up and running!</p>\n<h3>Sending Webmentions (No Command Line)</h3>\n<p>There are a number of ways to send webmentions to someone whose post you link to. In many cases, people will include a form at the bottom of posts (e.g., see the bottom of this post), but if you can't find that, you have a few options.</p>\n<p>The simplest way to find someone's endpoint if it's not clearly listed:</p>\n<ul><li>Right-click on the page and choose “View Page Source”</li>\n<li>Cmd + F (Mac) or ctrl + F (Win/Linux) for “webmention”</li>\n<li>If you get a result, it should look something like <code>&lt;link rel=\"webmention\" href=\"https://webmention.io/reillyspitzfaden.com/webmention\" /&gt;</code> from above.</li>\n<li>If you go to the URL in the <code>href=\"\"</code> field, that should be the person's endpoint. You should be able to put your URL in the first field and the target post in the second and mention them!</li>\n</ul><p>A quick way to check if the page supports webmentions before bothering with this is Brent Lineberry's <a href=\"https://orangegnome.com/posts/2929/supports-webmentions-bookmarklet\">Supports Webmentions?</a> bookmarklet. If you bookmark this in your browser, you can click the bookmark while on a page and it will let you know if the page supports webmentions. Juha-Matti Santala also has a <a href=\"https://hamatti.org/posts/webmention-bookmarklet/\">bookmarklet</a> that does something similar. If you right-click in your bookmark bar and paste the code snippet from the bottom of the post into the URL field, it should work. The benefit to this is that clicking on it copies the endpoint URL to your clipboard, so you can ctrl + V/cmd + V it easily.</p>\n<h3>Making a Webmentions Form</h3>\n<p>If you want to make things easier for your visitors, here's how to add a form to your site for people to send you mentions. Below is the HTML I use. Notice the URL in the <code>action=\"\"</code> field — that's the only thing you should have to change to make this work on your site. Replace “<a href=\"http://reillyspitzfaden.com\">reillyspitzfaden.com</a>” with your own URL and you should be set!</p>\n<pre><code><span><span><span>&lt;</span>form</span> <span>id</span><span><span>=</span><span>\"</span>webmention-form<span>\"</span></span> <span>action</span><span><span>=</span><span>\"</span>https://webmention.io/reillyspitzfaden.com/webmention<span>\"</span></span> <span>method</span><span><span>=</span><span>\"</span>POST<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>label</span> <span>for</span><span><span>=</span><span>\"</span>webmention-form<span>\"</span></span><span>&gt;</span></span><span>&lt;!-- insert any description for the form here --&gt;</span><span><span><span>&lt;/</span>label</span><span>&gt;</span></span>\n\n    <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>webmention-source<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>url<span>\"</span></span> <span>autocomplete</span><span><span>=</span><span>\"</span>url<span>\"</span></span> <span>required</span><span><span>=</span><span>\"</span><span>\"</span></span> <span>pattern</span><span><span>=</span><span>\"</span>^https?:\\/\\/(.*)<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>source<span>\"</span></span> <span>placeholder</span><span><span>=</span><span>\"</span>URL/Permalink of your article<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>error<span>\"</span></span> <span>aria-invalid</span><span><span>=</span><span>\"</span>true<span>\"</span></span><span>&gt;</span></span>\n    \n    <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>webmention-submit<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>submit<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>submit<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>Ping me!<span>\"</span></span><span>&gt;</span></span>\n\n    <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>webmention-format<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>hidden<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>format<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>html<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>webmention-target<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>hidden<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>target<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span><span>\"</span></span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>form</span><span>&gt;</span></span></code></pre>\n<p>One thing to note is that without some further JavaScript, the page will reload and you'll get a white page showing something like this:</p>\n<pre><code><span>{</span>\n  <span>\"status\"</span><span>:</span> <span>\"pending\"</span><span>,</span>\n  <span>\"source\"</span><span>:</span> <span>\"&lt;source-url&gt;\"</span><span>,</span>\n  <span>\"target\"</span><span>:</span> <span>\"&lt;target-url&gt;\"</span><span>,</span>\n  <span>\"private\"</span><span>:</span> <span>false</span><span>,</span>\n  <span>\"summary\"</span><span>:</span> <span>\"The webmention is currently being processed\"</span><span>,</span>\n  <span>\"data\"</span><span>:</span> <span>{</span>\n  <span>}</span>\n<span>}</span></code></pre>\n<p>I don't mind enough to bother changing this behavior, plus I prefer to minimize client-side JavaScript — which would be necessary — but just something to be aware of.</p>\n<h3>Making Your Mentions Richer with Microformats</h3>\n<p>If you go to the URL <code>https://webmention.io/api/mentions.jf2?token=&lt;your-webmention-token&gt;</code> (get your token <a href=\"https://webmention.io/settings\">here</a> after signing in to Webmention.io), you can view the raw JSON data for webmentions sent to your site, which can be useful for understanding what's going on under the hood. When I first viewed this, I noticed that some people's mentions included details in an “author” field. When I tested sending mentions to myself, my “author” field was blank, and the difference seemed to be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Microformats\">microformats</a> — after adding them, my “author” field was filled out, as shown below:</p>\n<pre><code><span>\"author\"</span><span>:</span> <span>{</span>\n    <span>\"type\"</span><span>:</span> <span>\"card\"</span><span>,</span>\n    <span>\"name\"</span><span>:</span> <span>\"Reilly Spitzfaden\"</span><span>,</span>\n    <span>\"photo\"</span><span>:</span> <span>\"https://avatars.webmention.io/reillyspitzfaden.com/10ca64df4721d256914c260109486f3051ac27b5586304a64c6c90d776cd6146.jpg\"</span><span>,</span>\n    <span>\"url\"</span><span>:</span> <span>\"https://reillyspitzfaden.com/\"</span>\n<span>}</span></code></pre>\n<p>Microformats allow embedding properties in a page, to be read by social software, aggregators, search engines, and the like. Microformat tags are added as HTML class names. According to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Microformats\">MDN Web Docs</a></p>\n<blockquote>\n<ul><li>To create a microformats object, <code>h-*</code> class names are used in the class attribute.</li>\n</ul></blockquote>\n<blockquote>\n<ul><li>To add a property to an object, the <code>p-*</code>, <code>u-*</code>, <code>dt-*</code>, <code>e-*</code> class names are used on one of the object's descendants.</li>\n</ul></blockquote>\n<p>Below is the <a href=\"https://microformats.org/wiki/h-card\"><code>h-card</code></a> markup I use above each of my posts. MDN gives further information about the different prefixes you'll see in my markup <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Microformats#microformats_prefixes\">here</a>.</p>\n<pre><code><span><span><span>&lt;</span>div</span> <span>hidden</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>p-author h-card<span>\"</span></span><span>&gt;</span></span>\n        <span><span><span>&lt;</span>a</span> <span>rel</span><span><span>=</span><span>\"</span>author<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>u-url u-uid<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://reillyspitzfaden.com<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n        <span><span><span>&lt;</span>img</span> <span>class</span><span><span>=</span><span>\"</span>u-photo<span>\"</span></span> <span>src</span><span><span>=</span><span>\"</span>https://reillyspitzfaden.com/media/headshot_gbc_kirby_300px.jpg<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>Reilly Spitzfaden<span>\"</span></span><span>&gt;</span></span>\n        <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>p-name<span>\"</span></span><span>&gt;</span></span>\n            <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>p-given-name<span>\"</span></span><span>&gt;</span></span>Reilly<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n            <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>p-family-name<span>\"</span></span><span>&gt;</span></span>Spitzfaden<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n        <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n        <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>a</span> <span>rel</span><span><span>=</span><span>\"</span>syndication<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>u-syndication<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>&lt;mastodon-or-bsky-url&gt;<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span></code></pre>\n<p>The outer <code>&lt;div&gt;</code> ensures the markup is not diplayed to users. The inner <code>&lt;div&gt;</code> creates a microformats object with the <code>h-card</code> class; the <code>p-author</code> property adds that this card is for an author. The <code>u-url</code> and <code>u-uid</code> classes indicate that “<a href=\"https://reillyspitzfaden.com\">https://reillyspitzfaden.com</a>” is my site URL, with the <code>u-*</code> prefix indicating a link; similarly, <code>u-photo</code> gives a link to a photo to act as an avatar, and <code>u-syndication</code> gives link(s) to where I <a href=\"https://www.citationneeded.news/posse/\">POSSE</a> my posts. The <code>p-name</code>, <code>p-given-name</code>, and <code>p-family-name</code> classes give plain-text information about me (plain-text indicated by the <code>p-*</code> prefix).</p>\n<p>In addition to this card, the entire article (including the card) is surrounded in an <code>&lt;article&gt;</code> tag with the class <code>h-entry</code>, creating a microformat object for the entire entry. The <code>&lt;h2&gt;</code> for the post title within that <code>&lt;article</code> has the class <code>p-name</code>, and the content of the post is in a <code>&lt;div&gt;</code> with the class <code>e-content</code>. As described in the MDN link above, the <code>e-*</code> prefix is for “element tree properties where the entire contained element hierarchy is the value” — i.e., because <code>e-content</code> refers to the entire post contents, rather than any one single HTML element, we use <code>e-*</code>.</p>\n<p>In addition to enriching webmention data, microformats make a number of other <a href=\"https://indieweb.org/\">IndieWeb</a> practices possible, which I will describe more in a future post.</p>\n<h3>Sending Webmentions (Command Line)</h3>\n<p>Searching the page for a mention endpoint and typing into that is not too hard to do, but it's also not very convenient. Two ways to send webmentions using the terminal are to use cURL, or to use <a href=\"https://webmention.app/docs#using-the-command-line\">Webmention.app</a>. With cURL, you format your command as <code>curl -i -d source=source -d target=target endpoint</code>. So for example, to RSVP to the Homebrew Website Club, I might run</p>\n<pre><code><span>curl</span> <span>-i</span> <span>-d</span> <span>source</span><span>=</span><span>\"https://reillyspitzfaden.com/interactions/2025/04/rsvp-homebrew-website-club-americas-april-16/\"</span> <span>-d</span> <span>target</span><span>=</span><span>\"https://events.indieweb.org/2025/04/homebrew-website-club-americas-xCttvgRnN4Pl\"</span> <span>\"https://events.indieweb.org/webmention\"</span></code></pre>\n<p>This again requires knowing the endpoint (either with a bookmarklet or viewing the source). Webmention.app has a command line tool that makes sending mentions particularly easy. Once you've <a href=\"https://nodejs.org/en/download\">installed NodeJS</a>, run <code>npm install @remy/webmention</code> in your terminal in the folder where you want to install this tool. From that folder, you can run</p>\n<pre><code>npx webmention https://reillyspitzfaden.com/feed.xml</code></pre>\n<p>This uses your site's RSS feed to get your most recent posts, so you would substitute your feed URL for mine. This tool will display all links that have webmention endpoints — no manual checking required! You can send webmentions for your latest post by running</p>\n<pre><code>npx webmention https://reillyspitzfaden.com/feed.xml <span>--limit</span> <span>1</span> <span>--send</span></code></pre>\n<p>(again, replacing my feed URL with your own).</p>\n<p>One potential issue is that this package seems to be a little outdated these days. When I tried to install it on my site, NodeJS showed some critical vulnerabilities. When I installed it in its own separate folder, this wasn't as much of an issue for some reason, so you might try that — make a folder, open it in the terminal, and then run <code>npm install @remy/webmention</code>. The <a href=\"https://webmention.app/\">Webmention.app</a> site also offers some other tools, so you might play with those, although I haven't used them myself.</p>\n<h3>Accessing Mentions in Eleventy</h3>\n<p>Eleventy lets you use <a href=\"https://www.11ty.dev/docs/data-js/\">JavaScript data files</a> which will run when the site builds and make the resulting data globally available. These files go in the <code>_data</code> subfolder in your site source directory, and the data is available as an object with the same name as the file (e.g., the file <code>webmentions.mjs</code> will make the data available as the <code>webmentions</code> object globally).</p>\n_data/webmentions.mjs\n<pre><code><span>import</span> EleventyFetch <span>from</span> <span>\"@11ty/eleventy-fetch\"</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n\t<span>const</span> url <span>=</span> <span><span>`</span><span>https://webmention.io/api/mentions.jf2?token=</span><span><span>${</span>process<span>.</span>env<span>.</span><span>WEBMENTION_IO_TOKEN</span><span>}</span></span><span>&amp;per-page=1000</span><span>`</span></span><span>;</span>\n\t<span>try</span> <span>{</span>\n\t\t<span>const</span> webmentions <span>=</span> <span>await</span> <span>EleventyFetch</span><span>(</span>url<span>,</span> <span>{</span>\n\t\t\t<span>duration</span><span>:</span> <span>\"1h\"</span><span>,</span>\n\t\t\t<span>type</span><span>:</span> <span>\"json\"</span><span>,</span>\n\t\t<span>}</span><span>)</span><span>;</span>\n\t\t<span>return</span> <span>{</span>\n\t\t\t<span>mentions</span><span>:</span> webmentions<span>.</span>children<span>,</span>\n\t\t<span>}</span><span>;</span>\n\t<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>{</span>\n\t\t\t<span>mentions</span><span>:</span> <span>[</span> <span>\"none\"</span> <span>]</span>\n\t\t<span>}</span><span>;</span>\n\t<span>}</span>\n<span>}</span><span>;</span></code></pre>\n<p>Note that this file is <code>webmentions.mjs</code>, rather than using the <code>.js</code> extension, and it uses <a href=\"https://flaviocopes.com/es-modules/\">ES Modules</a> syntax. As I mentioned <a href=\"https://reillyspitzfaden.com/posts/2025/02/webmentions-without-plugins/\">here</a>, while some tutorials/documentation show CommonJS syntax and the <code>.js</code> extension, I could never get it to work like that. I'm not 100% sure, but it seems to be a difference with Eleventy v3.x.x.</p>\n<p>To get the API <a href=\"https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/#fn1\">[1]</a> key for Webmention.io, go to <a href=\"https://webmention.io/settings\">https://webmention.io/settings</a> after signing in. In the section “API Key,” there is a value you can copy. As this page mentions,</p>\n<blockquote>\n<p>[if] you don't mind anyone being able to retrieve webmentions to your domain, you don't need to keep this private. The only thing this token can do is retrieve all webmentions to your domain. It can't modify any data on your account.</p>\n</blockquote>\n<p>If you don't mind the key being public, you can hard-code it in the URL in <code>_data/webmentions.mjs</code> and skip the next paragraph and the <code>index.js</code> file.</p>\n<p>If you do want to keep it private, you can add the key as an <a href=\"https://docs.netlify.com/environment-variables/get-started/#import-variables-with-the-netlify-ui\">environment variable in Netlify</a>. Note in <code>index.js</code>, I'm importing the <a href=\"https://www.npmjs.com/package/dotenv\"><code>dotenv</code></a> Node package, which allows my site to access these variables. If you substitute your key into the line <code>https://webmention.io/api/mentions.jf2?token=${process.env.WEBMENTION_IO_TOKEN}&amp;per-page=1000</code>, you get all webmentions available as an object, with the list of mentions in the <code>children</code> field.</p>\nindex.js\n<pre><code><span>require</span><span>(</span><span>\"dotenv\"</span><span>)</span><span>.</span><span>config</span><span>(</span><span>)</span><span>;</span></code></pre>\n<p>Below is the Liquid template I use to import these mentions. As I mentioned above, if you go to the URL <code>https://webmention.io/api/mentions.jf2?token=&lt;your-webmention-token&gt;</code>, you can view the raw JSON data, in which you'll see the field “wm-property.” Possible values for “wm-property” are <code>in-reply-to</code>, <code>like-of</code>, <code>repost-of</code>, <code>bookmark-of</code>, <code>mention-of</code>, and <code>rsvp</code>, according to the Webmention.io <a href=\"https://github.com/aaronpk/webmention.io?tab=readme-ov-file#api\">API guide</a>. As shown in my code below, I use this list of properties to display, e.g., “someone liked this post,” or “someone replied to this post,” falling back on the generic “mentioned” for the rest of the properties.</p>\n<pre><code><span><span>{%</span> <span>assign</span> pageUrl <span>=</span> <span>\"https://reillyspitzfaden.com\"</span> <span>|</span> <span>append</span><span>:</span> <span>page</span><span>.</span>url <span>%}</span></span>\n<span><span>{%</span> <span>assign</span> web_mentions <span>=</span> webmentions<span>.</span>mentions <span>|</span> <span>webWebmentions</span><span>:</span> pageUrl <span>%}</span></span>\n\n<span><span>{%</span> <span>for</span> mention <span>in</span> web_mentions <span>reversed</span> <span>%}</span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>webmention-comment<span>\"</span></span><span>&gt;</span></span>\n        <span><span>{%-</span> <span>if</span> mention<span>.</span>author<span>.</span>name <span>and</span> mention<span>.</span>author<span>.</span>name <span>!=</span> <span>\"\"</span> <span>%}</span></span>\n            <span><span>{{</span> mention<span>.</span>author<span>.</span>name <span>}}</span></span>\n        <span><span>{%-</span> <span>else</span> <span>%}</span></span>\n            Someone\n        <span><span>{%-</span> <span>endif</span> <span>%}</span></span>\n\n        <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>\"</span><span><span>{{</span> mention<span>.</span>url <span>}}</span></span><span>\"</span></span><span>&gt;</span></span>\n            <span><span>{%-</span> <span>if</span> mention<span>[</span><span>\"wm-property\"</span><span>]</span> <span>==</span> <span>\"like-of\"</span> <span>-%}</span></span>\n                liked\n            <span><span>{%-</span> <span>elsif</span> mention<span>[</span><span>\"wm-property\"</span><span>]</span> <span>==</span> <span>\"in-reply-to\"</span> <span>-%}</span></span>\n                replied to\n            <span><span>{%-</span> <span>else</span> <span>-%}</span></span>\n                mentioned\n            <span><span>{%-</span> <span>endif</span> <span>-%}</span></span>\n        <span><span><span>&lt;/</span>a</span><span>&gt;</span></span> this post\n        <span><span>{%-</span> <span>if</span> mention<span>.</span>content<span>.</span>text <span>%}</span></span>\n            <span><span><span>&lt;</span>blockquote</span><span>&gt;</span></span><span><span>{{</span> mention<span>.</span>content<span>.</span>text <span>|</span> <span>truncate</span><span>:</span> <span>175</span> <span>}}</span></span><span><span><span>&lt;/</span>blockquote</span><span>&gt;</span></span>\n        <span><span>{%-</span> <span>endif</span> <span>%}</span></span>\n    <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n<span><span>{%</span> <span>endfor</span> <span>%}</span></span></code></pre>\n<p>Notice the custom <a href=\"https://shopify.dev/docs/api/liquid/filters\">Liquid filter</a> <code>webWebmentions</code>. The vertical pipe character “|” sends the value <code>webmentions.mentions</code> from <code>_data/webmentions.mjs</code> into the filter, with the colon after <code>webWebmentions</code> allowing me to send the additional value of <code>pageUrl</code> to the filter. The code for the filter is in my <code>eleventy.config.js</code> file, and is shown below:</p>\n<pre><code>eleventyConfig<span>.</span><span>addFilter</span><span>(</span><span>\"webWebmentions\"</span><span>,</span> <span>function</span><span>(</span><span>webmentions<span>,</span> url</span><span>)</span> <span>{</span>  \n  <span>const</span> pageWebmentions <span>=</span> webmentions\n    <span>.</span><span>filter</span><span>(</span><span>(</span><span>mention</span><span>)</span> <span>=&gt;</span> mention<span>[</span><span>\"wm-target\"</span><span>]</span> <span>==</span> url<span>)</span>\n    <span>.</span><span>filter</span><span>(</span><span>(</span><span>mention</span><span>)</span> <span>=&gt;</span> <span>!</span>mention<span>[</span><span>\"wm-source\"</span><span>]</span><span>.</span><span>includes</span><span>(</span><span>\"https://brid.gy/\"</span><span>)</span><span>)</span>\n    <span>.</span><span>filter</span><span>(</span><span>(</span><span>mention</span><span>)</span> <span>=&gt;</span> <span>!</span>mention<span>[</span><span>\"wm-source\"</span><span>]</span><span>.</span><span>includes</span><span>(</span><span>\"https://bsky.brid.gy/\"</span><span>)</span><span>)</span>\n    <span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=&gt;</span> <span>new</span> <span>Date</span><span>(</span>b<span>.</span>published<span>)</span> <span>-</span> <span>new</span> <span>Date</span><span>(</span>a<span>.</span>published<span>)</span><span>)</span>\n  \n  <span>return</span> pageWebmentions<span>;</span>\n<span>}</span><span>)</span><span>;</span></code></pre>\n<p>I filter the mentions by the following rules:</p>\n<ul><li>The <code>wm-target</code> property is the URL for the page — i.e., the mention refers to this post</li>\n<li>The <code>wm-source</code> property does not include “<a href=\"https://brid.gy/\">https://brid.gy/</a>” or “<a href=\"https://bsky.brid.gy/\">https://bsky.brid.gy/</a>” — i.e., the mention is from someone's blog, rather than being a Mastodon/Bluesky interaction bridged over with Ryan Barrett's <a href=\"https://brid.gy/\">Bridgy</a> service.\n<ul><li>The counterpart to this filter, <code>fediWebmentions</code> does the opposite, only allowing mentions that <em>are</em> from those two URLs. This lets me show a separate counter of Fediverse/Bluesky interactions on the <a href=\"https://www.citationneeded.news/posse/\">POSSE</a>-ed copies.</li>\n</ul></li>\n<li>I sort the mentions in reverse chronological order, using the “published” field which you can view in the raw JSON data at <code>https://webmention.io/api/mentions.jf2?token=&lt;your-webmention-token&gt;</code>.</li>\n</ul><p>I then use the Liquid keyword <code>assign</code> to assign the results of the <code>webWebmentions</code> filter to the <code>web_mentions</code> variable, allowing me to access and further parse them in the Liquid template.</p>\n<h3>Automatically Bringing in New Mentions</h3>\n\n<p>Because the <code>_data/webmentions.mjs</code> script brings in new mentions when the site builds, rebuilding the site is a good way to bring in mentions without client-side JavaScript. My site is hosted on <a href=\"https://www.netlify.com/\">Netlify</a>, and a simple way to make the site automatically rebuild is to use <a href=\"https://docs.netlify.com/configure-builds/build-hooks/\">build hooks</a>. This is a URL and when you send an HTTP POST request to it, the site will build. You can do this with cURL: <code>curl -X POST -d {} \"https://api.netlify.com/build_hooks/&lt;your-hook-here&gt;\"</code>.</p>\n<p>I send out these POST requests from my home server. The server is a 2015 ASUS laptop running Ubuntu Server, which I set up according to <a href=\"https://chriskalos.notion.site/The-0-Home-Server-Written-Guide-5d5ff30f9bdd4dfbb9ce68f0d914f1f6\">this guide</a>. <a href=\"https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/#fn2\">[2]</a> GitHub actions are also another good way of scheduling this — Benji links to how he does that <a href=\"https://www.benji.dog/notes/1738091887/\">here</a>. I actually tried doing it with GitHub actions first, but for some reason, I couldn't get scheduled actions with <a href=\"https://en.wikipedia.org/wiki/Cron\"><code>cron</code></a>. to work for me.</p>\n<p>On my home server, however, <code>cron</code> was super easy to use. <code>cron</code> syntax has 5 fields: minute, hour, day (month), month, day (week). You can give them a value, or use an asterisk (“*”) to allow all values. <code>0 2 * * *</code> in the example below means “run every day at 2:00 GMT, regardless of month or day.” This <a href=\"https://crontab.guru/\">crontab.guru</a> tool may be helpful in figuring out the syntax. Note that the times are in GMT, rather than the local time zone, so you would need to convert to local time. To set up a <code>cron</code> job, type <code>crontab -e</code> (i.e., “edit the crontab file”) into your server's terminal, and add a line like the following to the file that opens:</p>\n<pre><code><span>0</span> <span>2</span> * * * <span>curl</span> <span>-X</span> POST <span>-d</span> <span>{</span><span>}</span> <span>\"https://api.netlify.com/build_hooks/&lt;your-hook-here&gt;\"</span></code></pre>\n\n<p>Thanks for reading! Hopefully this can be of assistance to someone.</p>\n<ol><li><p>You can find more information about the complete Webmention.io API <a href=\"https://github.com/aaronpk/webmention.io#api\">here</a>. <a href=\"https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/#fnref1\">↩︎</a></p>\n</li>\n<li><p>I use this server for a ton of things, including a <a href=\"https://jellyfin.org/\">Jellyfin</a> home streaming server — instructions included in the <a href=\"https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/\">server guide</a> linked above — and a copy of <a href=\"https://syncthing.net/\">Syncthing</a> so my devices are always synced, even if only some are active at any given time. It's very nice, and I'll definitely discuss more about that later! <a href=\"https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/#fnref2\">↩︎</a></p>\n</li>\n</ol>",
      "text": "Please feel free to use the table of contents to skip around — individual sections can be read on their own as mini-tutorials on a topic!\nWebmentions are great! They're a way that personal websites can interact with each other — you can notify another site when you link to them, and receive notifications when someone links to you. I find them to allow for some of the nicer parts of social interaction on the web, but with much more agency and much less inflammatory or harmful material than something like Facebook or Instagram. However, then can also be a bit intimidating, especially for non-developers.\n\nMy goal with this tutorial is that people with a wide range of experience with coding/working in a command line — including no experience — can benefit from it. In particular, if you just read the first two sections, you'll be able to use webmentions by signing up for two services (GitHub and Webmention.io) and adding two lines of HTML to your site:\n<link rel=\"me\" href=\"https://github.com/reillypascal\" />\n<link rel=\"webmention\" href=\"https://webmention.io/reillyspitzfaden.com/webmention\" />\nThis even works with tools like Squarespace or Wordpress! Beyond that, each section builds on the last, so depending on how much you're comfortable with and/or interested in, you can choose your own adventure. For people with coding experience, I have some fun discussion of parsing and displaying webmentions as comments on your site; automating the process of bringing them into your site without client-side JavaScript; and using tools like Bridgy to get Fediverse interactions as mentions.\nHere are the tools we'll be using:\nWebmention.io — this is the only strictly necessary one. It's a service by Aaron Parecki to receive and transmit webmentions so you don't have to run your own server.\nThe easiest way to log in to Webmention.io does require a trusted third party account such as GitHub. You don't actually have to do anything with your GitHub account though — as long as it exists and you can log in, you're good.\n\nEleventy — the static site generator I use to build my site, although you can do the basics of this on any site setup.\nNetlify — the hosting service I use. I use their build hooks to instruct my site to rebuild nightly and pull in new mentions.\nBridgy — if you share a post from your site on Mastodon/Bluesky/etc., this service can turn interactions with that post into webmentions that go to your site. You can then display these as comments on your blog.\nIf you have any trouble, the folks on the IndieWeb Chat are extremely helpful — you can ask them questions at the link, and the link also includes Discord/Slack versions of the chatroom if that's more your style.\nLet's get started!\nThe Basics with Webmention.io\nAs I mentioned in my first post on the topic, to start, go to Webmention.io and sign in using your site URL. You'll need a tag in the <head> of your site that looks something like this: <link rel=\"me\" href=\"https://github.com/reillypascal\" />. Substitute the URL in the href=\"\" field with your own GitHub profile URL. This allows you to use your website to sign in to Webmention.io, with your GitHub page acting as a trusted third party to verify your identity.\nOnce you're logged in, you can go to the “sites” tab of your dashboard (https://webmention.io/settings/sites) and enter your site in the “Create a new Site” field. This tripped me up the first time through, but Aaron mentioned he didn't want Webmention.io to automatically accept mentions for people who hadn't asked for them, so you have to manually add the site after signing in.\nOnce you've added it, you can click “Get Setup Code” next to your site (should be available on your “sites” tab after adding the URL). This will generate a tag you can copy and paste into the <head> element of your page — something like <link rel=\"webmention\" href=\"https://webmention.io/reillyspitzfaden.com/webmention\" />. You can also just copy my example here, replacing “reillyspitzfaden.com” with your own URL. You're now ready to go!\nIf you want to stop here, you can simply link to the endpoint for your site — should look like https://webmention.io/reillyspitzfaden.com/webmention, or in other words, the URL you put in the href=\"\" field above. People can send you webmentions by putting their post link in the “Source URL” field and your post link in the “Target URL” one. You can view your mentions by going to the dashboard on Webmention.io — https://webmention.io/dashboard — while signed in.\nIf you want to validate that your mentions are working properly, you can use webmention.rocks, which has a list of tests you can run, with helpful feedback.\nIn summary: two lines of HTML in the <head> tag, plus a link to your endpoint on each post is plenty to get up and running!\nSending Webmentions (No Command Line)\nThere are a number of ways to send webmentions to someone whose post you link to. In many cases, people will include a form at the bottom of posts (e.g., see the bottom of this post), but if you can't find that, you have a few options.\nThe simplest way to find someone's endpoint if it's not clearly listed:\nRight-click on the page and choose “View Page Source”\nCmd + F (Mac) or ctrl + F (Win/Linux) for “webmention”\nIf you get a result, it should look something like <link rel=\"webmention\" href=\"https://webmention.io/reillyspitzfaden.com/webmention\" /> from above.\nIf you go to the URL in the href=\"\" field, that should be the person's endpoint. You should be able to put your URL in the first field and the target post in the second and mention them!\nA quick way to check if the page supports webmentions before bothering with this is Brent Lineberry's Supports Webmentions? bookmarklet. If you bookmark this in your browser, you can click the bookmark while on a page and it will let you know if the page supports webmentions. Juha-Matti Santala also has a bookmarklet that does something similar. If you right-click in your bookmark bar and paste the code snippet from the bottom of the post into the URL field, it should work. The benefit to this is that clicking on it copies the endpoint URL to your clipboard, so you can ctrl + V/cmd + V it easily.\nMaking a Webmentions Form\nIf you want to make things easier for your visitors, here's how to add a form to your site for people to send you mentions. Below is the HTML I use. Notice the URL in the action=\"\" field — that's the only thing you should have to change to make this work on your site. Replace “reillyspitzfaden.com” with your own URL and you should be set!\n<form id=\"webmention-form\" action=\"https://webmention.io/reillyspitzfaden.com/webmention\" method=\"POST\">\n    <label for=\"webmention-form\"><!-- insert any description for the form here --></label>\n\n    <input id=\"webmention-source\" type=\"url\" autocomplete=\"url\" required=\"\" pattern=\"^https?:\\/\\/(.*)\" name=\"source\" placeholder=\"URL/Permalink of your article\" class=\"error\" aria-invalid=\"true\">\n    \n    <input id=\"webmention-submit\" type=\"submit\" name=\"submit\" value=\"Ping me!\">\n\n    <input id=\"webmention-format\" type=\"hidden\" name=\"format\" value=\"html\">\n    <input id=\"webmention-target\" type=\"hidden\" name=\"target\" value=\"\">\n</form>\nOne thing to note is that without some further JavaScript, the page will reload and you'll get a white page showing something like this:\n{\n  \"status\": \"pending\",\n  \"source\": \"<source-url>\",\n  \"target\": \"<target-url>\",\n  \"private\": false,\n  \"summary\": \"The webmention is currently being processed\",\n  \"data\": {\n  }\n}\nI don't mind enough to bother changing this behavior, plus I prefer to minimize client-side JavaScript — which would be necessary — but just something to be aware of.\nMaking Your Mentions Richer with Microformats\nIf you go to the URL https://webmention.io/api/mentions.jf2?token=<your-webmention-token> (get your token here after signing in to Webmention.io), you can view the raw JSON data for webmentions sent to your site, which can be useful for understanding what's going on under the hood. When I first viewed this, I noticed that some people's mentions included details in an “author” field. When I tested sending mentions to myself, my “author” field was blank, and the difference seemed to be microformats — after adding them, my “author” field was filled out, as shown below:\n\"author\": {\n    \"type\": \"card\",\n    \"name\": \"Reilly Spitzfaden\",\n    \"photo\": \"https://avatars.webmention.io/reillyspitzfaden.com/10ca64df4721d256914c260109486f3051ac27b5586304a64c6c90d776cd6146.jpg\",\n    \"url\": \"https://reillyspitzfaden.com/\"\n}\nMicroformats allow embedding properties in a page, to be read by social software, aggregators, search engines, and the like. Microformat tags are added as HTML class names. According to the MDN Web Docs\n\nTo create a microformats object, h-* class names are used in the class attribute.\n\n\nTo add a property to an object, the p-*, u-*, dt-*, e-* class names are used on one of the object's descendants.\n\nBelow is the h-card markup I use above each of my posts. MDN gives further information about the different prefixes you'll see in my markup here.\n<div hidden>\n    <div class=\"p-author h-card\">\n        <a rel=\"author\" class=\"u-url u-uid\" href=\"https://reillyspitzfaden.com\"></a>\n        <img class=\"u-photo\" src=\"https://reillyspitzfaden.com/media/headshot_gbc_kirby_300px.jpg\" alt=\"Reilly Spitzfaden\">\n        <span class=\"p-name\">\n            <span class=\"p-given-name\">Reilly</span>\n            <span class=\"p-family-name\">Spitzfaden</span>\n        </span>\n        </div>\n    <a rel=\"syndication\" class=\"u-syndication\" href=\"<mastodon-or-bsky-url>\"></a>\n</div>\nThe outer <div> ensures the markup is not diplayed to users. The inner <div> creates a microformats object with the h-card class; the p-author property adds that this card is for an author. The u-url and u-uid classes indicate that “https://reillyspitzfaden.com” is my site URL, with the u-* prefix indicating a link; similarly, u-photo gives a link to a photo to act as an avatar, and u-syndication gives link(s) to where I POSSE my posts. The p-name, p-given-name, and p-family-name classes give plain-text information about me (plain-text indicated by the p-* prefix).\nIn addition to this card, the entire article (including the card) is surrounded in an <article> tag with the class h-entry, creating a microformat object for the entire entry. The <h2> for the post title within that <article has the class p-name, and the content of the post is in a <div> with the class e-content. As described in the MDN link above, the e-* prefix is for “element tree properties where the entire contained element hierarchy is the value” — i.e., because e-content refers to the entire post contents, rather than any one single HTML element, we use e-*.\nIn addition to enriching webmention data, microformats make a number of other IndieWeb practices possible, which I will describe more in a future post.\nSending Webmentions (Command Line)\nSearching the page for a mention endpoint and typing into that is not too hard to do, but it's also not very convenient. Two ways to send webmentions using the terminal are to use cURL, or to use Webmention.app. With cURL, you format your command as curl -i -d source=source -d target=target endpoint. So for example, to RSVP to the Homebrew Website Club, I might run\ncurl -i -d source=\"https://reillyspitzfaden.com/interactions/2025/04/rsvp-homebrew-website-club-americas-april-16/\" -d target=\"https://events.indieweb.org/2025/04/homebrew-website-club-americas-xCttvgRnN4Pl\" \"https://events.indieweb.org/webmention\"\nThis again requires knowing the endpoint (either with a bookmarklet or viewing the source). Webmention.app has a command line tool that makes sending mentions particularly easy. Once you've installed NodeJS, run npm install @remy/webmention in your terminal in the folder where you want to install this tool. From that folder, you can run\nnpx webmention https://reillyspitzfaden.com/feed.xml\nThis uses your site's RSS feed to get your most recent posts, so you would substitute your feed URL for mine. This tool will display all links that have webmention endpoints — no manual checking required! You can send webmentions for your latest post by running\nnpx webmention https://reillyspitzfaden.com/feed.xml --limit 1 --send\n(again, replacing my feed URL with your own).\nOne potential issue is that this package seems to be a little outdated these days. When I tried to install it on my site, NodeJS showed some critical vulnerabilities. When I installed it in its own separate folder, this wasn't as much of an issue for some reason, so you might try that — make a folder, open it in the terminal, and then run npm install @remy/webmention. The Webmention.app site also offers some other tools, so you might play with those, although I haven't used them myself.\nAccessing Mentions in Eleventy\nEleventy lets you use JavaScript data files which will run when the site builds and make the resulting data globally available. These files go in the _data subfolder in your site source directory, and the data is available as an object with the same name as the file (e.g., the file webmentions.mjs will make the data available as the webmentions object globally).\n_data/webmentions.mjs\nimport EleventyFetch from \"@11ty/eleventy-fetch\";\n\nexport default async function () {\n\tconst url = `https://webmention.io/api/mentions.jf2?token=${process.env.WEBMENTION_IO_TOKEN}&per-page=1000`;\n\ttry {\n\t\tconst webmentions = await EleventyFetch(url, {\n\t\t\tduration: \"1h\",\n\t\t\ttype: \"json\",\n\t\t});\n\t\treturn {\n\t\t\tmentions: webmentions.children,\n\t\t};\n\t} catch (e) {\n\t\treturn {\n\t\t\tmentions: [ \"none\" ]\n\t\t};\n\t}\n};\nNote that this file is webmentions.mjs, rather than using the .js extension, and it uses ES Modules syntax. As I mentioned here, while some tutorials/documentation show CommonJS syntax and the .js extension, I could never get it to work like that. I'm not 100% sure, but it seems to be a difference with Eleventy v3.x.x.\nTo get the API [1] key for Webmention.io, go to https://webmention.io/settings after signing in. In the section “API Key,” there is a value you can copy. As this page mentions,\n\n[if] you don't mind anyone being able to retrieve webmentions to your domain, you don't need to keep this private. The only thing this token can do is retrieve all webmentions to your domain. It can't modify any data on your account.\n\nIf you don't mind the key being public, you can hard-code it in the URL in _data/webmentions.mjs and skip the next paragraph and the index.js file.\nIf you do want to keep it private, you can add the key as an environment variable in Netlify. Note in index.js, I'm importing the dotenv Node package, which allows my site to access these variables. If you substitute your key into the line https://webmention.io/api/mentions.jf2?token=${process.env.WEBMENTION_IO_TOKEN}&per-page=1000, you get all webmentions available as an object, with the list of mentions in the children field.\nindex.js\nrequire(\"dotenv\").config();\nBelow is the Liquid template I use to import these mentions. As I mentioned above, if you go to the URL https://webmention.io/api/mentions.jf2?token=<your-webmention-token>, you can view the raw JSON data, in which you'll see the field “wm-property.” Possible values for “wm-property” are in-reply-to, like-of, repost-of, bookmark-of, mention-of, and rsvp, according to the Webmention.io API guide. As shown in my code below, I use this list of properties to display, e.g., “someone liked this post,” or “someone replied to this post,” falling back on the generic “mentioned” for the rest of the properties.\n{% assign pageUrl = \"https://reillyspitzfaden.com\" | append: page.url %}\n{% assign web_mentions = webmentions.mentions | webWebmentions: pageUrl %}\n\n{% for mention in web_mentions reversed %}\n    <div class=\"webmention-comment\">\n        {%- if mention.author.name and mention.author.name != \"\" %}\n            {{ mention.author.name }}\n        {%- else %}\n            Someone\n        {%- endif %}\n\n        <a href=\"{{ mention.url }}\">\n            {%- if mention[\"wm-property\"] == \"like-of\" -%}\n                liked\n            {%- elsif mention[\"wm-property\"] == \"in-reply-to\" -%}\n                replied to\n            {%- else -%}\n                mentioned\n            {%- endif -%}\n        </a> this post\n        {%- if mention.content.text %}\n            <blockquote>{{ mention.content.text | truncate: 175 }}</blockquote>\n        {%- endif %}\n    </div>\n{% endfor %}\nNotice the custom Liquid filter webWebmentions. The vertical pipe character “|” sends the value webmentions.mentions from _data/webmentions.mjs into the filter, with the colon after webWebmentions allowing me to send the additional value of pageUrl to the filter. The code for the filter is in my eleventy.config.js file, and is shown below:\neleventyConfig.addFilter(\"webWebmentions\", function(webmentions, url) {  \n  const pageWebmentions = webmentions\n    .filter((mention) => mention[\"wm-target\"] == url)\n    .filter((mention) => !mention[\"wm-source\"].includes(\"https://brid.gy/\"))\n    .filter((mention) => !mention[\"wm-source\"].includes(\"https://bsky.brid.gy/\"))\n    .sort((a, b) => new Date(b.published) - new Date(a.published))\n  \n  return pageWebmentions;\n});\nI filter the mentions by the following rules:\nThe wm-target property is the URL for the page — i.e., the mention refers to this post\nThe wm-source property does not include “https://brid.gy/” or “https://bsky.brid.gy/” — i.e., the mention is from someone's blog, rather than being a Mastodon/Bluesky interaction bridged over with Ryan Barrett's Bridgy service.\nThe counterpart to this filter, fediWebmentions does the opposite, only allowing mentions that are from those two URLs. This lets me show a separate counter of Fediverse/Bluesky interactions on the POSSE-ed copies.\n\nI sort the mentions in reverse chronological order, using the “published” field which you can view in the raw JSON data at https://webmention.io/api/mentions.jf2?token=<your-webmention-token>.\nI then use the Liquid keyword assign to assign the results of the webWebmentions filter to the web_mentions variable, allowing me to access and further parse them in the Liquid template.\nAutomatically Bringing in New Mentions\n\nBecause the _data/webmentions.mjs script brings in new mentions when the site builds, rebuilding the site is a good way to bring in mentions without client-side JavaScript. My site is hosted on Netlify, and a simple way to make the site automatically rebuild is to use build hooks. This is a URL and when you send an HTTP POST request to it, the site will build. You can do this with cURL: curl -X POST -d {} \"https://api.netlify.com/build_hooks/<your-hook-here>\".\nI send out these POST requests from my home server. The server is a 2015 ASUS laptop running Ubuntu Server, which I set up according to this guide. [2] GitHub actions are also another good way of scheduling this — Benji links to how he does that here. I actually tried doing it with GitHub actions first, but for some reason, I couldn't get scheduled actions with cron. to work for me.\nOn my home server, however, cron was super easy to use. cron syntax has 5 fields: minute, hour, day (month), month, day (week). You can give them a value, or use an asterisk (“*”) to allow all values. 0 2 * * * in the example below means “run every day at 2:00 GMT, regardless of month or day.” This crontab.guru tool may be helpful in figuring out the syntax. Note that the times are in GMT, rather than the local time zone, so you would need to convert to local time. To set up a cron job, type crontab -e (i.e., “edit the crontab file”) into your server's terminal, and add a line like the following to the file that opens:\n0 2 * * * curl -X POST -d {} \"https://api.netlify.com/build_hooks/<your-hook-here>\"\n\nThanks for reading! Hopefully this can be of assistance to someone.\nYou can find more information about the complete Webmention.io API here. ↩︎\n\nI use this server for a ton of things, including a Jellyfin home streaming server — instructions included in the server guide linked above — and a copy of Syncthing so my devices are always synced, even if only some are active at any given time. It's very nice, and I'll definitely discuss more about that later! ↩︎"
    },
    "mention-of": "https://www.benji.dog/notes/1738091887/",
    "wm-property": "mention-of",
    "wm-private": false,
    "rels": {
      "canonical": "https://reillyspitzfaden.com/digital-garden/tutorials/webmention-tutorial/"
    }
  }
]