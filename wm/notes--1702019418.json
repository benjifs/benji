[
  {
    "type": "entry",
    "author": {
      "type": "card",
      "name": "",
      "photo": "",
      "url": ""
    },
    "url": "https://sarajaksa.eu/2023/12/reply-to-benjis-note-on-watch-metaformats/",
    "published": null,
    "wm-received": "2023-12-08T19:14:12Z",
    "wm-id": 1750636,
    "wm-source": "https://sarajaksa.eu/2023/12/reply-to-benjis-note-on-watch-metaformats/",
    "wm-target": "https://www.benji.dog/notes/1702019418/",
    "wm-protocol": "webmention",
    "mention-of": "https://www.benji.dog/notes/1702019418/",
    "wm-property": "mention-of",
    "wm-private": false,
    "rels": {
      "canonical": "https://sarajaksa.eu/2023/12/reply-to-benjis-note-on-watch-metaformats/"
    }
  },
  {
    "type": "entry",
    "author": {
      "type": "card",
      "name": "",
      "photo": "",
      "url": ""
    },
    "url": "https://sarajaksa.eu/2023/12/reply-to-gregors-reply-to-my-post-the-chicken-egg-problem-of-movie-microformats/",
    "published": null,
    "wm-received": "2023-12-09T21:43:46Z",
    "wm-id": 1751460,
    "wm-source": "https://sarajaksa.eu/2023/12/reply-to-gregors-reply-to-my-post-the-chicken-egg-problem-of-movie-microformats/",
    "wm-target": "https://www.benji.dog/notes/1702019418/",
    "wm-protocol": "webmention",
    "mention-of": "https://www.benji.dog/notes/1702019418/",
    "wm-property": "mention-of",
    "wm-private": false,
    "rels": {
      "canonical": "https://sarajaksa.eu/2023/12/reply-to-gregors-reply-to-my-post-the-chicken-egg-problem-of-movie-microformats/"
    }
  },
  {
    "type": "entry",
    "author": {
      "type": "card",
      "name": "Sara Jakša",
      "photo": "",
      "url": "https://sarajaksa.eu"
    },
    "url": "https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/",
    "published": "2024-01-02T00:00:00+01:00",
    "wm-received": "2024-01-03T16:27:09Z",
    "wm-id": 1762337,
    "wm-source": "https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/",
    "wm-target": "https://www.benji.dog/notes/1702019418/",
    "wm-protocol": "webmention",
    "content": {
      "html": "<h2>Analysis of the Movies I Watched<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Analysis-of-the-Movies-I-Watched\">¶</a>\n</h2>\n\n\n\n\n\n\n\n\n<p>The <a href=\"https://www.benji.dog/notes/1702019418/\">conversation about movies microformats</a> last month made me change my <a href=\"https://sarajaksa.eu/movies-and-series/\">watched movies list</a> in a way to include them. That means, that I now have this information structured in a way, that I can analyse it. So I decided to try to analyse the movies that I watched. Especially since I think this was the year that I watched more movies, than I normally do.</p>\n<p>Also, my blogging platform does allow for using the Jupyter Notebooks as one of the blog posts formats. This and the corresponding book analysis could be a good test if this is something, that I could be including more frequently on my blog. I don't even know, how this post will look in the end.</p>\n\n\n\n\n\n\n\n\n<h3>Data Preparation<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Data-Preparation\">¶</a>\n</h3>\n\n\n\n\n\nIn [1]:\n\n\n<pre><span></span><span>import</span> <span>requests</span>\n<span>import</span> <span>collections</span>\n<span>import</span> <span>geopandas</span>\n<span>import</span> <span>pandas</span>\n<span>import</span> <span>mf2py</span>\n<span>from</span> <span>shapely.geometry</span> <span>import</span> <span>Polygon</span><span>,</span> <span>MultiPolygon</span>\n<span>import</span> <span>math</span>\n</pre>\n\n\n\n\n\n\nIn [2]:\n\n\n<pre><span></span><span>movie_data</span> <span>=</span> <span>requests</span><span>.</span><span>get</span><span>(</span><span>\"http://0.0.0.0:8000/movies-and-series/\"</span><span>)</span><span>.</span><span>text</span>\n<span>movie_data_microformats</span> <span>=</span> <span>mf2py</span><span>.</span><span>parse</span><span>(</span><span>movie_data</span><span>[</span><span>movie_data</span><span>.</span><span>index</span><span>(</span><span>'&lt;h3&gt;Movies&lt;/h3&gt;'</span><span>):</span><span>movie_data</span><span>.</span><span>index</span><span>(</span><span>'&lt;h4&gt;2022-12&lt;/h4&gt;'</span><span>)],</span> <span>html_parser</span> <span>=</span> <span>\"lxml\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\n\n\n\n<h3>Data Analysis<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Data-Analysis\">¶</a>\n</h3>\n\n\n\n\n\n\n\n\n<h4>Number of Movies<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Number-of-Movies\">¶</a>\n</h4>\n\n\n\n\n\nIn [3]:\n\n\n<pre><span></span><span>len</span><span>(</span><span>movie_data_microformats</span><span>[</span><span>'items'</span><span>])</span>\n</pre>\n\n\n\n\n\n\nOut[3]:\n\n<pre>42</pre>\n\n\n\n\n\n\n\n\n\n\n<p>I have watched 42 movies in the last year.</p>\n<p>This is the first full year, that I kept data off. But I am still sure, that I watched more movies than any year in recent years. I don't have the memory to compare this with my younger years.</p>\n<p>I think the reason for this way, that towards the end of the year, I have added the visit to the cinema as the accepted procrastination methods. So if I was not in the mode to do, what I wanted to do, visit to the cinema was a way to avoid this. And once I started to visit cinemas more, I saw more and more movies, that I wanted to watch. I still have one on the list from the last year, that is already in the cinema.</p>\n\n\n\n\n\n\n\n\n<h4>Places I Watched Them<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Places-I-Watched-Them\">¶</a>\n</h4>\n\n\n\n\n\n\n\n\n<p>In the previous sections, I have mentioned that I have started to go to cinema more frequently. I do keep track of where I watch a specific movie, so it is possible to see this effect as well. I do it by saving the link to it, to I will need to parse it from the URL of each movie.</p>\n\n\n\n\n\nIn [4]:\n\n\n<pre><span></span><span>movie_location_map</span> <span>=</span> <span>{</span>\n    <span>\"liffe.si\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Liffe\"</span><span>],</span>\n    <span>\"cineplexx.si\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Cineplexx\"</span><span>],</span>\n    <span>\"kinodvor.org\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Kinodvor\"</span><span>],</span>\n    <span>\"cd-cc.si\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Cankarjev Dom\"</span><span>],</span>\n    <span>\"kinoteka.si\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Kinoteka\"</span><span>],</span>\n    <span>\"kino-bezigrad.si\"</span><span>:</span> <span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Kino Bežigrad\"</span><span>],</span>\n    <span>\"netflix.com\"</span><span>:</span> <span>[</span><span>\"Streaming\"</span><span>,</span> <span>\"Netflix\"</span><span>],</span>\n    <span>\"plus.cobiss.net\"</span><span>:</span> <span>[</span><span>\"DVD\"</span><span>,</span> <span>\"Library\"</span><span>],</span>\n    <span>\"crunchyroll.com\"</span><span>:</span> <span>[</span><span>\"Streaming\"</span><span>,</span> <span>\"Crunchyroll\"</span><span>],</span>\n    <span>\"instagram.com\"</span><span>:</span> <span>[</span><span>\"Event\"</span><span>,</span> <span>\"DIH\"</span><span>],</span> <span># Only because I know which movie this is</span>\n    <span>\"theoutmuseum.org\"</span><span>:</span> <span>[</span><span>\"Internet\"</span><span>],</span>\n    <span>\"DVD\"</span><span>:</span> <span>[</span><span>\"DVD\"</span><span>]</span>\n<span>}</span>\n</pre>\n\n\n\n\n\n\nIn [5]:\n\n\n<pre><span></span><span>movies_locations</span> <span>=</span> <span>pandas</span><span>.</span><span>DataFrame</span><span>.</span><span>from_records</span><span>(</span>\n    <span>collections</span><span>.</span><span>Counter</span><span>([</span>\n        <span>movie_location_map</span><span>[</span><span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"location\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\"https://\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"www.\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>split</span><span>(</span><span>\"/\"</span><span>)[</span><span>0</span><span>]][</span><span>0</span><span>]</span>\n        <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span>\n    <span>])</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span> <span>=</span> <span>[</span><span>\"Type of Location\"</span><span>,</span> <span>\"Count\"</span><span>]</span>\n<span>)</span>\n</pre>\n\n\n\n\n\n\nIn [6]:\n\n\n<pre><span></span><span>movies_locations</span>\n</pre>\n\n\n\n\n\n\nOut[6]:\n\n\nType of Location\nCount\n0\nCinema\n34\n1\nStreaming\n4\n2\nDVD\n2\n3\nEvent\n1\n4\nInternet\n1\n\n\n\n\n\n\n\nIn [7]:\n\n\n<pre><span></span><span>movies_locations</span><span>.</span><span>sort_values</span><span>(</span><span>by</span><span>=</span><span>\"Count\"</span><span>)</span><span>.</span><span>plot</span><span>(</span><span>kind</span> <span>=</span> <span>\"barh\"</span><span>,</span> <span>x</span><span>=</span><span>0</span><span>,</span> <span>y</span><span>=</span><span>1</span><span>,</span> <span>legend</span> <span>=</span> <span>False</span><span>,</span> <span>color</span><span>=</span><span>\"blue\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[7]:\n\n<pre>&lt;Axes: ylabel='Type of Location'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>I have to admit, I knew I watched a lot of movies in the cinema. I did not expects, that I watched such a overhelming majoirty of the movies there. :) I guess that means, that the cinema around me provide enough entertaimnet for me?</p>\n\n\n\n\n\n\n\n\n<p>I can check, how many movies did I watch in each cinema. For the Liffe\n(Ljubljana International Film Festival), I am providing the link to the\nfestival and not to the cinema in questions. So I will correct for this.</p>\n\n\n\n\n\nIn [8]:\n\n\n<pre><span></span><span>cinema_movies_by_place</span> <span>=</span> <span>collections</span><span>.</span><span>Counter</span><span>(</span>\n    <span>[</span>\n        <span>movie_location_map</span><span>[</span>\n            <span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"location\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\"https://\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"www.\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>split</span><span>(</span><span>\"/\"</span><span>)[</span><span>0</span><span>]</span>\n        <span>][</span><span>1</span><span>]</span>\n        <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span>\n        <span>if</span> <span>movie_location_map</span><span>[</span>\n            <span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"location\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\"https://\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"www.\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>split</span><span>(</span><span>\"/\"</span><span>)[</span><span>0</span><span>]</span>\n        <span>][</span><span>0</span><span>]</span> <span>==</span> <span>\"Cinema\"</span>\n    <span>]</span>\n<span>)</span><span>.</span><span>most_common</span><span>()</span>\n</pre>\n\n\n\n\n\n\nIn [9]:\n\n\n<pre><span></span><span>liffe_correction</span> <span>=</span> <span>{</span>  \n    <span>'Kinodvor'</span><span>:</span> <span>1</span><span>,</span>\n    <span>'Cankarjev Dom'</span><span>:</span> <span>3</span><span>,</span> \n    <span>'Kino Bežigrad'</span><span>:</span> <span>4</span><span>,</span>\n<span>}</span>\n<span>cinema_movies_by_place_liffe_correction</span> <span>=</span> <span>pandas</span><span>.</span><span>DataFrame</span><span>.</span><span>from_records</span><span>([</span>\n    <span>(</span><span>place</span><span>,</span> <span>count</span> <span>+</span> <span>liffe_correction</span><span>[</span><span>place</span><span>])</span> \n    <span>if</span> <span>place</span> <span>in</span> <span>liffe_correction</span> \n    <span>else</span> <span>(</span><span>place</span><span>,</span> <span>count</span><span>)</span> \n    <span>for</span> <span>place</span><span>,</span> <span>count</span> <span>in</span> <span>cinema_movies_by_place</span> \n    <span>if</span> <span>place</span> <span>!=</span> <span>\"Liffe\"</span>\n<span>],</span> <span>columns</span><span>=</span><span>[</span><span>\"Cinema\"</span><span>,</span> <span>\"Count\"</span><span>])</span><span>.</span><span>sort_values</span><span>(</span><span>by</span><span>=</span><span>\"Count\"</span><span>,</span> <span>ascending</span><span>=</span><span>False</span><span>)</span><span>.</span><span>reset_index</span><span>()</span><span>.</span><span>drop</span><span>(</span><span>\"index\"</span><span>,</span> <span>axis</span><span>=</span><span>1</span><span>)</span>\n</pre>\n\n\n\n\n\n\nIn [10]:\n\n\n<pre><span></span><span>cinema_movies_by_place_liffe_correction</span>\n</pre>\n\n\n\n\n\n\nOut[10]:\n\n\nCinema\nCount\n0\nKinodvor\n9\n1\nCankarjev Dom\n8\n2\nCineplexx\n7\n3\nKino Bežigrad\n6\n4\nKinoteka\n4\n\n\n\n\n\n\n\nIn [11]:\n\n\n<pre><span></span><span>cinema_movies_by_place_liffe_correction</span><span>.</span><span>sort_values</span><span>(</span><span>by</span><span>=</span><span>\"Count\"</span><span>)</span><span>.</span><span>plot</span><span>(</span><span>kind</span> <span>=</span> <span>\"barh\"</span><span>,</span><span>x</span><span>=</span><span>0</span><span>,</span><span>legend</span> <span>=</span> <span>False</span><span>,</span><span>color</span><span>=</span><span>\"blue\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[11]:\n\n<pre>&lt;Axes: ylabel='Cinema'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>I am not sure, how it is in larger cities... but here each of the cinemas have their flavour:</p>\n<ul><li>Kinodvor is the cinema, where you go see the international, usually non-Holywood movies. They are part of the European cinema network. They also organise movie screening at the castle each summer.</li>\n<li>Cankarjev dom is not actually a cinema, but it is a main city cultural place. They do host the Liffe movie festival and have the Liffe after Liffe program, which I had last year. They pick six movies from the Liffe festival and then screen one per month in the first half of a year.</li>\n<li>Cineplexx is a cinema about 10 minutes by foot from my home. They mostly screen the Slovenian and popular American movies.</li>\n<li>Kino Bežigrad is usually screening popular American movies. But then it also participates as a venue in different movie festivals and hosts different thematic events, like Japanese movies week or similar. They also have movie watching from cars and in the pools, but I never went to any of them.</li>\n<li>Kinoteka is mostly screening the non-current movies. Though the had the LGBT movie festival this year, and I watched one of the this year movies during it.</li>\n</ul><p>I have to admit, that with my the convenience wins a lot of time. I would give priority to the movies, that I want to see. But if the movie is played in the multiple cinemas, a lot of times the more convenient cinema would win. I am trying to change that.</p>\n<p>I am also aware, how much the different events effect this. I would not have Kinodvor that high without their summer screening at the castle and I would not have Cankarjev Dom and Bežigrad lower or non-existent without the Liffe festival. I guess they know what they are doing to bring people to the cinema.</p>\n<p>On the other hand, it was in the Cineplexx, where I had the experience to having the whole place for myself. I was the only one watching a specific movie for this showing. Felt a bit guilt of them having to play it just for me.</p>\n\n\n\n\n\nIn [12]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span><span>collections</span><span>.</span><span>Counter</span><span>([</span>\n    <span>movie_location_map</span><span>[</span><span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"location\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\"https://\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"www.\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>split</span><span>(</span><span>\"/\"</span><span>)[</span><span>0</span><span>]][</span><span>1</span><span>]</span>\n    <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span>\n    <span>if</span> <span>movie_location_map</span><span>[</span><span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"location\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\"https://\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"www.\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>split</span><span>(</span><span>\"/\"</span><span>)[</span><span>0</span><span>]][</span><span>0</span><span>]</span> <span>==</span> <span>\"Streaming\"</span>\n<span>])</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span> <span>=</span> <span>[</span><span>\"Streaming Service\"</span><span>,</span> <span>\"Count\"</span><span>])</span>\n</pre>\n\n\n\n\n\n\nOut[12]:\n\n\nStreaming Service\nCount\n0\nCrunchyroll\n2\n1\nNetflix\n2\n\n\n\n\n\n\n\n\n\n\n<p>When I talk about movies and series at work, it seems all they watch is what is available on the streaming services. Usually Netflix. So I could so also the analysis of the streaming services, and you can see that I did not use it much for movie watching.</p>\n<p>Honestly, if I was not borrowing the Netflix password from somebody in my household, I don't think I would watch that either. Don't watch enough to b worth the subscription.</p>\n\n\n\n\n\n\n\n\n<h4>Years, the Movies I Watched were Produced<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Years,-the-Movies-I-Watched-were-Produced\">¶</a>\n</h4>\n\n\n\n\n\n\n\n\n<p>I can also analyse how much of a recent bias to I have for movies. Considering how high of a ratio of movies do I watch in the cinema, it should be really high. But lets check anyway.</p>\n\n\n\n\n\nIn [13]:\n\n\n<pre><span></span><span>movies_year_data</span> <span>=</span> <span>collections</span><span>.</span><span>Counter</span><span>([</span><span>int</span><span>(</span><span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>'published'</span><span>][</span><span>0</span><span>])</span> <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]])</span>\n</pre>\n\n\n\n\n\n\nIn [14]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span><span>movies_year_data</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span><span>=</span><span>[</span><span>\"Year\"</span><span>,</span> <span>\"Count\"</span><span>])</span>\n</pre>\n\n\n\n\n\n\nOut[14]:\n\n\nYear\nCount\n0\n2023\n17\n1\n2022\n13\n2\n2019\n3\n3\n2021\n1\n4\n2005\n1\n5\n2012\n1\n6\n2016\n1\n7\n2015\n1\n8\n2014\n1\n9\n2020\n1\n10\n1993\n1\n11\n2002\n1\n\n\n\n\n\n\n\nIn [15]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>([</span>\n    <span>[</span><span>year</span><span>,</span> <span>movies_year_data</span><span>[</span><span>year</span><span>]]</span> \n    <span>if</span> <span>year</span> <span>in</span> <span>movies_year_data</span> \n    <span>else</span> <span>[</span><span>year</span><span>,</span> <span>0</span><span>]</span> \n    <span>for</span> <span>year</span> <span>in</span> <span>list</span><span>(</span><span>range</span><span>(</span><span>min</span><span>(</span><span>movies_year_data</span><span>.</span><span>keys</span><span>()),</span> <span>max</span><span>(</span><span>movies_year_data</span><span>)</span> <span>+</span> <span>1</span><span>))</span>\n<span>],</span> <span>columns</span><span>=</span><span>[</span><span>\"Year\"</span><span>,</span> <span>\"Count\"</span><span>])</span><span>.</span><span>plot</span><span>(</span><span>kind</span><span>=</span><span>\"bar\"</span><span>,</span> <span>x</span><span>=</span><span>\"Year\"</span><span>,</span> <span>y</span><span>=</span><span>\"Count\"</span><span>,</span> <span>ylabel</span><span>=</span><span>\"Count\"</span><span>,</span> <span>xlabel</span><span>=</span><span>\"Year\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[15]:\n\n<pre>&lt;Axes: xlabel='Year', ylabel='Count'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>And as I expected, I had not watched a single movie produced before my birth and the majority of movies that I watched were produced in the last two years. I have a very strong recency bias, when it comes to movies - but then I expected that.</p>\n\n\n\n\n\n\n\n\n<h4>Languages the Movies I Watched were in<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Languages-the-Movies-I-Watched-were-in\">¶</a>\n</h4>\n\n\n\n\n\n\n\n\n<p>I use media for language learning, so I keep track of the languages, that the movies were originally in and in which did I watched me. While movies are usually not the media I normally choose for this, I guess keeping track of that had become a habit.</p>\n<p>For cinema movies, I generally take the language from their site. For the non-cinema movies, I take the language data from the IMDB. Not that the later is very... representative of what I want to track. For example, for the Italian movie <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3536\" lang=\"it\" xml:lang=\"it\">Rapito</a> (Kidnapped) had Italian as the main language. So the cinema page lists Italian as the language. The <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3536\">IMDB site of the same movie</a> lists the Italian, Hebrew, and Latin - which were all the languages used in the movie.</p>\n<p>In same cases, I would include multiple languages for the movie, since multiple have substantial role and it would not be the same movie, if everything was in the same language. One that example is <a class=\"u-watch-of\" href=\"https://www.cineplexx.si/movie/varuhi-formule/\" lang=\"sr\" xml:lang=\"sr\">Čuvari formule</a> (Guardians of the Formula). It is a very subjective line to draw.</p>\n<p>But I guess it is easier to just list all of them. And I guess I would need to be more careful of this in the future and not just copy them blindly?</p>\n\n\n\n\n\nIn [16]:\n\n\n<pre><span></span><span>movies_lang</span> <span>=</span> <span>collections</span><span>.</span><span>Counter</span><span>(</span>\n    <span>sum</span><span>([</span>\n        <span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"dub\"</span><span>][</span><span>0</span><span>]</span><span>.</span><span>split</span><span>(</span><span>\", \"</span><span>)</span> \n        <span>if</span> <span>\"dub\"</span> <span>in</span> <span>movie</span><span>[</span><span>'properties'</span><span>]</span>\n        <span>else</span> <span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>'language'</span><span>][</span><span>0</span><span>]</span><span>.</span><span>split</span><span>(</span><span>\", \"</span><span>)</span> \n        <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span>\n    <span>],</span> <span>[])</span>\n<span>)</span>\n<span>len</span><span>(</span><span>movies_lang</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[16]:\n\n<pre>16</pre>\n\n\n\n\n\n\n\nIn [17]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span><span>movies_lang</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span><span>=</span><span>[</span><span>\"Language\"</span><span>,</span> <span>\"Number of Movies\"</span><span>])</span>\n</pre>\n\n\n\n\n\n\nOut[17]:\n\n\nLanguage\nNumber of Movies\n0\nEnglish\n24\n1\nFrench\n7\n2\nJapanese\n6\n3\nGerman\n3\n4\nDanish\n2\n5\nSlovenian\n2\n6\nDzongkha\n2\n7\nItalian\n2\n8\nSerbian\n1\n9\nFinish\n1\n10\nCroatian\n1\n11\nRomanian\n1\n12\nHungarian\n1\n13\nCatalan\n1\n14\nSpanish\n1\n15\nKorean\n1\n\n\n\n\n\n\n\nIn [18]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span>\n    <span>movies_lang</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span><span>=</span><span>[</span><span>\"Language\"</span><span>,</span> <span>\"Number of Movies\"</span><span>]</span>\n<span>)</span><span>.</span><span>sort_values</span><span>(</span><span>by</span><span>=</span><span>\"Number of Movies\"</span><span>)</span><span>.</span><span>plot</span><span>(</span><span>kind</span><span>=</span><span>\"barh\"</span><span>,</span> <span>x</span><span>=</span><span>\"Language\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[18]:\n\n<pre>&lt;Axes: ylabel='Language'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Over half of the movies that I watched were in English. But I also watched movies in the 16 different language - it is just that most languages had a very small amount of movies, they were present in. I was sort of hoping, that English would be less representative. But I guess the English speaking world still holds predominance in the movie world.</p>\n<p>I am surprised that French was that high. But the movies that I watched in French were normally a good ones. So I guess it makes sense.</p>\n\n\n\n\n\nIn [19]:\n\n\n<pre><span></span><span>collections</span><span>.</span><span>Counter</span><span>([</span>\n    <span>(</span><span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>'language'</span><span>][</span><span>0</span><span>],</span> <span>movie</span><span>[</span><span>'properties'</span><span>][</span><span>\"dub\"</span><span>][</span><span>0</span><span>])</span> \n    <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span> \n    <span>if</span> <span>\"dub\"</span> <span>in</span> <span>movie</span><span>[</span><span>'properties'</span><span>]</span>\n<span>])</span>\n</pre>\n\n\n\n\n\n\nOut[19]:\n\n<pre>Counter({('English', 'Slovenian'): 1})</pre>\n\n\n\n\n\n\n\n\n\n\n<p>There was just one movie, that I watched dubbed. And even that one was a mistake. I misread the cinema listing and I though it was going to be in the Ukrainian - since it was an Ukrainian animation movie. On the end I watched it in Slovenian, and found out that the original was in English. Not sure why, but I guess it was the whole war thing going on? Hard to film there and hard to find the voice actors with the language skills elsewhere?</p>\n\n\n\n\n\n\n\n\n<h4>Countries the Movies were Associated with<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Countries-the-Movies-were-Associated-with\">¶</a>\n</h4>\n\n\n\n\n\n\n\n\n<p>I am actually not sure, how they decide which country the movie is from. The short research seems to indicate, that it is the places, where productions houses have their headquarters? And it might have something to do with financing? Not sure about the last part. If it is in this direction, it is a bit of a stupid metric?</p>\n<p>Still, I was interested in the predominance of the English speaking films in the previous section. So I wanted to see also the countries, from where these movies were from.</p>\n\n\n\n\n\n\n\n\n<h5>Preparing the Country Data<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Preparing-the-Country-Data\">¶</a>\n</h5>\n\n\n\n\n\n\n\n\n<p>In order to to this, I first want to make a couple of correction to the maps data. For example, the Asian map looks weird without the Russian and the European looks weird with it. Even though I do count Russian as part of Europe, I am visualising it as part of Asia for the aesthetics purposes.</p>\n<p>Also, I needed to remove a couple of islands from some countries for the purpose of aesthetics.</p>\n\n\n\n\n\nIn [36]:\n\n\n<pre><span></span><span>countries</span> <span>=</span> <span>geopandas</span><span>.</span><span>read_file</span><span>(</span><span>geopandas</span><span>.</span><span>datasets</span><span>.</span><span>get_path</span><span>(</span><span>\"naturalearth_lowres\"</span><span>))</span>\n</pre>\n\n\n\n\n\n\n\n\n<pre>/tmp/ipykernel_26224/1046189302.py:1: FutureWarning: The geopandas.dataset module is deprecated and will be removed in GeoPandas 1.0. You can get the original 'naturalearth_lowres' data from https://www.naturalearthdata.com/downloads/110m-cultural-vectors/.\n  countries = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\n</pre>\n\n\n\n\n\n\n\nIn [21]:\n\n\n<pre><span></span><span>countries</span><span>.</span><span>at</span><span>[</span><span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>][</span><span>\"continent\"</span><span>]</span><span>.</span><span>index</span><span>[</span><span>0</span><span>],</span><span>\"continent\"</span><span>]</span> <span>=</span> <span>\"Asia\"</span>\n\n<span>countries</span><span>.</span><span>at</span><span>[</span><span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"France\"</span><span>][</span><span>\"continent\"</span><span>]</span><span>.</span><span>index</span><span>[</span><span>0</span><span>],</span><span>\"geometry\"</span><span>]</span> <span>=</span> <span>MultiPolygon</span><span>([</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"France\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>1</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"France\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>2</span><span>]</span>\n<span>])</span>\n\n<span>countries</span><span>.</span><span>at</span><span>[</span><span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>][</span><span>\"continent\"</span><span>]</span><span>.</span><span>index</span><span>[</span><span>0</span><span>],</span><span>\"geometry\"</span><span>]</span> <span>=</span> <span>MultiPolygon</span><span>([</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>0</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>1</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>2</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>3</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>4</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>5</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>6</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>7</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>8</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>9</span><span>],</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Russia\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>10</span><span>]</span>\n<span>])</span>\n\n<span>countries</span><span>.</span><span>at</span><span>[</span><span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Norway\"</span><span>][</span><span>\"continent\"</span><span>]</span><span>.</span><span>index</span><span>[</span><span>0</span><span>],</span><span>\"geometry\"</span><span>]</span> <span>=</span> <span>MultiPolygon</span><span>([</span>\n    <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span> <span>==</span> <span>\"Norway\"</span><span>]</span><span>.</span><span>explode</span><span>(</span><span>index_parts</span><span>=</span><span>True</span><span>)[</span><span>\"geometry\"</span><span>]</span><span>.</span><span>iloc</span><span>[</span><span>1</span><span>]</span>\n<span>])</span>\n</pre>\n\n\n\n\n\n\n\n\n\n<p>Also some of the countries names in the visualisation package and in my data do not agree. So I need to map the difference from one to another and check, if any one is still missing from there.</p>\n\n\n\n\n\nIn [22]:\n\n\n<pre><span></span><span>country_geopandas_mapper</span> <span>=</span> <span>{</span>\n    <span>\"Bosnia and Herzegovina\"</span><span>:</span> <span>\"Bosnia and Herz.\"</span><span>,</span>\n    <span>\"United States\"</span><span>:</span> <span>\"United States of America\"</span><span>,</span>\n    <span>\"Butan\"</span><span>:</span> <span>\"Bhutan\"</span><span>,</span>\n    <span>'Czech Republic'</span><span>:</span> <span>\"Czechia\"</span><span>,</span>\n<span>}</span>\n</pre>\n\n\n\n\n\n\nIn [23]:\n\n\n<pre><span></span><span>all_countries_count</span> <span>=</span> <span>collections</span><span>.</span><span>defaultdict</span><span>(</span><span>int</span><span>)</span>\n<span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]:</span>\n    <span>movie_countries</span> <span>=</span> <span>movie</span><span>[</span><span>\"properties\"</span><span>][</span><span>'countries'</span><span>][</span><span>0</span><span>]</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>)</span>\n    <span>for</span> <span>country</span> <span>in</span> <span>movie_countries</span><span>:</span>\n        <span>country</span> <span>=</span> <span>country</span><span>.</span><span>strip</span><span>()</span>\n        <span>if</span> <span>country</span> <span>in</span> <span>country_geopandas_mapper</span><span>:</span>\n            <span>country</span> <span>=</span> <span>country_geopandas_mapper</span><span>[</span><span>country</span><span>]</span>\n        <span>all_countries_count</span><span>[</span><span>country</span><span>]</span> <span>+=</span> <span>1</span>\n</pre>\n\n\n\n\n\n\nIn [24]:\n\n\n<pre><span></span><span>set</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())</span><span>.</span><span>difference</span><span>(</span><span>set</span><span>(</span><span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span><span>.</span><span>isin</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())][</span><span>\"name\"</span><span>]))</span>\n</pre>\n\n\n\n\n\n\nOut[24]:\n\n<pre>set()</pre>\n\n\n\n\n\n\n\n\n\n\n<h5>Visualising the Data<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Visualising-the-Data\">¶</a>\n</h5>\n\n\n\n\n\nIn [25]:\n\n\n<pre><span></span><span>len</span><span>(</span><span>all_countries_count</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[25]:\n\n<pre>25</pre>\n\n\n\n\n\n\n\nIn [26]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span><span>all_countries_count</span><span>.</span><span>items</span><span>(),</span> <span>columns</span><span>=</span><span>[</span><span>'Country'</span><span>,</span> <span>'Count'</span><span>])</span><span>.</span><span>sort_values</span><span>(</span><span>by</span><span>=</span><span>\"Count\"</span><span>,</span> <span>ascending</span>\n<span>=</span><span>False</span><span>)</span><span>.</span><span>reset_index</span><span>()</span><span>.</span><span>drop</span><span>(</span><span>\"index\"</span><span>,</span> <span>axis</span><span>=</span><span>1</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[26]:\n\n\nCountry\nCount\n0\nUnited States of America\n13\n1\nUnited Kingdom\n13\n2\nFrance\n10\n3\nJapan\n7\n4\nGermany\n5\n5\nItaly\n4\n6\nSweden\n3\n7\nMontenegro\n2\n8\nBhutan\n2\n9\nDenmark\n2\n10\nIreland\n2\n11\nSlovenia\n2\n12\nSpain\n2\n13\nNorth Macedonia\n1\n14\nUkraine\n1\n15\nCzechia\n1\n16\nFinland\n1\n17\nNorway\n1\n18\nSerbia\n1\n19\nTaiwan\n1\n20\nCroatia\n1\n21\nBosnia and Herz.\n1\n22\nRomania\n1\n23\nChina\n1\n24\nSouth Korea\n1\n\n\n\n\n\n\n\nIn [27]:\n\n\n<pre><span></span><span>ax</span> <span>=</span> <span>countries</span><span>.</span><span>plot</span><span>(</span><span>color</span><span>=</span><span>\"grey\"</span><span>)</span>\n<span>ax</span><span>.</span><span>axis</span><span>(</span><span>'off'</span><span>)</span>\n<span>colors</span> <span>=</span> <span>[</span>\n    <span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span> <span>-</span> <span>(</span><span>all_countries_count</span><span>[</span><span>c</span><span>]</span> <span>/</span> <span>max</span><span>(</span><span>all_countries_count</span><span>.</span><span>values</span><span>())</span> <span>*</span> <span>0.7</span><span>))</span> \n    <span>for</span> <span>c</span> <span>in</span> <span>countries</span><span>[</span><span>\"name\"</span><span>]</span> \n    <span>if</span> <span>c</span> <span>in</span> <span>all_countries_count</span>\n<span>]</span>\n<span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span><span>.</span><span>isin</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())]</span><span>.</span><span>plot</span><span>(</span><span>ax</span><span>=</span><span>ax</span><span>,</span> <span>color</span><span>=</span><span>colors</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[27]:\n\n<pre>&lt;Axes: &gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>I have watched movies from 25 different countries. That makes is what... a bit above 10% of all countries. Still the US and UK dominate the charts.</p>\n<p>Also from the map it can be clearly seen, that I have a string northern hemisphere bias. I generally do not try to watch a varied movies. I watch the movies, that I think I will like based on the description and maybe trailer. But from a lot of parts of the world, they are only bringing the movies with romance or living situation (what is book world would be described as literary book). Something, that I usually avoid.</p>\n<p>Though I did enjoy the two Bhutan movies I watched, even though they could be described as the living situation ones. But I would consider both of the comedy. Especially <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3607\">The Monk and the Gun</a>. But honestly, bring us some more shooters like the <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2022/Film.aspx?idF=3441\" lang=\"ko\" xml:lang=\"ko\">범죄도시2</a> or <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3578\" lang=\"fi\" xml:lang=\"fi\">Sisu</a>. Or comedies like <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3571\" lang=\"jp\" xml:lang=\"jp\">血いともだち</a>. Or mysteries like <a class=\"u-watch-of\" href=\"https://www.kinodvor.org/film/anatomija-padca/\" lang=\"fr\" xml:lang=\"fr\">Anatomie d’une chute</a>. Or animations and so on.</p>\n<p>Sometimes I have the feeling like there is some sort of bias. That people either watch the popular US movies or they watch the literal movies from the rest of the world. I would very much like to watch the genre movies from the rest of the world.</p>\n\n\n\n\n\n\n\n\n<p>There is also the visualisation of the countries per continent.</p>\n\n\n\n\n\nIn [28]:\n\n\n<pre><span></span><span>continents</span> <span>=</span> <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"name\"</span><span>]</span><span>.</span><span>isin</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())][</span><span>\"continent\"</span><span>]</span>\n\n<span>for</span> <span>continent</span> <span>in</span> <span>set</span><span>(</span><span>continents</span><span>):</span>\n    <span>countinent_countries</span> <span>=</span> <span>countries</span><span>[</span><span>countries</span><span>[</span><span>\"continent\"</span><span>]</span> <span>==</span> <span>continent</span><span>]</span>\n    <span>ax</span> <span>=</span> <span>countinent_countries</span><span>.</span><span>plot</span><span>(</span><span>color</span><span>=</span><span>\"grey\"</span><span>)</span>\n    <span>ax</span><span>.</span><span>axis</span><span>(</span><span>'off'</span><span>)</span>\n    <span>colors</span> <span>=</span> <span>[(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span> <span>-</span> <span>(</span><span>all_countries_count</span><span>[</span><span>c</span><span>]</span> <span>/</span> <span>max</span><span>(</span><span>all_countries_count</span><span>.</span><span>values</span><span>())</span> <span>*</span> <span>0.7</span><span>))</span> <span>for</span> <span>c</span> <span>in</span> <span>countinent_countries</span><span>[</span><span>countinent_countries</span><span>[</span><span>\"name\"</span><span>]</span><span>.</span><span>isin</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())][</span><span>\"name\"</span><span>]]</span>\n    <span>countinent_countries</span><span>[</span><span>countinent_countries</span><span>[</span><span>\"name\"</span><span>]</span><span>.</span><span>isin</span><span>(</span><span>all_countries_count</span><span>.</span><span>keys</span><span>())]</span><span>.</span><span>plot</span><span>(</span><span>ax</span><span>=</span><span>ax</span><span>,</span> <span>color</span><span>=</span><span>colors</span><span>)</span>\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4>IMDB Data Collection<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#IMDB-Data-Collection\">¶</a>\n</h4>\n\n\n\n\n\n\n\n\n<p>Because of the <a href=\"https://sarajaksa.eu/projects/indieweb-movies/\">movie project I recently started</a>, I now have the IMDB data for all the movies there as part of the site. Which means, that I can use it and I can have some more metadata from there as well. Even if I don't always agree with their metadata.</p>\n\n\n\n\n\n\n\n\n<h5>Preparing the data<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Preparing-the-data\">¶</a>\n</h5>\n\n\n\n\n\nIn [29]:\n\n\n<pre><span></span><span>movies_metadata</span> <span>=</span> <span>requests</span><span>.</span><span>get</span><span>(</span><span>\"http://0.0.0.0:8000/projects/indieweb-movies/movies_imdb_data.json\"</span><span>)</span><span>.</span><span>json</span><span>()</span>\n</pre>\n\n\n\n\n\n\nIn [30]:\n\n\n<pre><span></span><span>movies_imdb</span> <span>=</span> <span>[</span>\n    <span>next</span><span>(</span>\n        <span>movies_metadata</span><span>[</span><span>url</span><span>.</span><span>replace</span><span>(</span><span>\"https://www.imdb.com/title/\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"/\"</span><span>,</span> <span>\"\"</span><span>)</span> <span>]</span>\n        <span>for</span> <span>url</span> <span>in</span> <span>movie</span><span>[</span><span>\"properties\"</span><span>][</span><span>\"url\"</span><span>]</span> \n        <span>if</span> <span>\"www.imdb.com\"</span> <span>in</span> <span>url</span>\n    <span>)</span>\n    <span>for</span> <span>movie</span> <span>in</span> <span>movie_data_microformats</span><span>[</span><span>\"items\"</span><span>]</span>\n<span>]</span>\n</pre>\n\n\n\n\n\n\n\n\n\n<h5>Genres of the Movies<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Genres-of-the-Movies\">¶</a>\n</h5>\n\n\n\n\n\nIn [31]:\n\n\n<pre><span></span><span>pandas</span><span>.</span><span>DataFrame</span><span>(</span>\n    <span>collections</span><span>.</span><span>Counter</span><span>(</span><span>sum</span><span>([</span><span>movie</span><span>[</span><span>'Genre'</span><span>]</span><span>.</span><span>split</span><span>(</span><span>\", \"</span><span>)</span> <span>for</span> <span>movie</span> <span>in</span> <span>movies_imdb</span><span>],</span> <span>[]))</span><span>.</span><span>most_common</span><span>(),</span> <span>columns</span><span>=</span><span>[</span><span>\"Genre\"</span><span>,</span> <span>\"Count\"</span><span>]</span>\n<span>)</span>\n</pre>\n\n\n\n\n\n\nOut[31]:\n\n\nGenre\nCount\n0\nDrama\n28\n1\nAdventure\n10\n2\nComedy\n9\n3\nAction\n8\n4\nHistory\n7\n5\nCrime\n7\n6\nFantasy\n6\n7\nBiography\n5\n8\nAnimation\n4\n9\nThriller\n4\n10\nRomance\n3\n11\nShort\n2\n12\nWar\n2\n13\nFamily\n2\n14\nWestern\n1\n15\nSci-Fi\n1\n16\nHorror\n1\n17\nMystery\n1\n\n\n\n\n\n\n\n\n\n\n<p>The first thing that I could analyse is the genre of the movies I watch. To tell you the truth, I am not sure what the drama was supposed to indicate. It apparently describes over half of the movies, that I had watched. So I also wanted to see, what movies are included in each of the genres.</p>\n\n\n\n\n\nIn [32]:\n\n\n<pre><span></span><span>for</span> <span>genre</span> <span>in</span> <span>sorted</span><span>(</span><span>list</span><span>(</span><span>set</span><span>(</span><span>sum</span><span>([</span><span>movie</span><span>[</span><span>'Genre'</span><span>]</span><span>.</span><span>split</span><span>(</span><span>\", \"</span><span>)</span> <span>for</span> <span>movie</span> <span>in</span> <span>movies_imdb</span><span>],</span> <span>[])))):</span>\n    <span>print</span><span>(</span><span>genre</span><span>.</span><span>upper</span><span>()</span> <span>+</span> <span>\": \"</span> <span>+</span> <span>\", \"</span><span>.</span><span>join</span><span>([</span><span>movie</span><span>[</span><span>\"Title\"</span><span>]</span> <span>for</span> <span>movie</span> <span>in</span> <span>movies_imdb</span> <span>if</span> <span>genre</span> <span>in</span> <span>movie</span><span>[</span><span>'Genre'</span><span>]]))</span>\n    <span>print</span><span>(</span><span>\"\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\n\n\n<pre>ACTION: Sword Art Online: Progressive - Aria of a Starless Night, Napoleon, The Marvels, Kubi, Sisu, Gran Turismo, Enola Holmes 2, Enola Holmes\n\nADVENTURE: Sword Art Online: Progressive - Aria of a Starless Night, Napoleon, The Marvels, Mavka: The Forest Song, Gran Turismo, Barbie, The Grand Budapest Hotel, Enola Holmes 2, Enola Holmes, Asterix &amp; Obelix: Mission Cleopatra\n\nANIMATION: Sword Art Online: Progressive - Aria of a Starless Night, Gekijouban Isekai Quartet: Another World, Mavka: The Forest Song, Weathering with You\n\nBIOGRAPHY: A Royal Affair, Napoleon, The Promised Land, A Quiet Passion, Oppenheimer\n\nCOMEDY: Gekijouban Isekai Quartet: Another World, Mavka: The Forest Song, Chii Tomodachi, Barbie, The Grand Budapest Hotel, Ace Date, The Banshees of Inisherin, Groundhog Day, Asterix &amp; Obelix: Mission Cleopatra\n\nCRIME: Death of the Little Match Girl, A Haunting in Venice, The Grand Budapest Hotel, Anatomy of a Fall, Enola Holmes 2, Enola Holmes, Decision to Leave\n\nDRAMA: Pride &amp; Prejudice, A Royal Affair, Strange Way of Life, Monster, Guardians of the Formula, Sepet Metulja, Kubi, Reality, The Promised Land, The Monk and the Gun, Kidnapped, A Quiet Passion, Death of the Little Match Girl, Gran Turismo, Suffragette, A Haunting in Venice, Portrait of a Lady on Fire, Oppenheimer, Nostalgia, Anatomy of a Fall, Living, R.M.N., Alcarràs, Lunana: A Yak in the Classroom, The Banshees of Inisherin, Weathering with You, Groundhog Day, Decision to Leave\n\nFAMILY: Lunana: A Yak in the Classroom, Asterix &amp; Obelix: Mission Cleopatra\n\nFANTASY: Gekijouban Isekai Quartet: Another World, The Marvels, Chii Tomodachi, Barbie, Weathering with You, Groundhog Day\n\nHISTORY: A Royal Affair, Guardians of the Formula, Kubi, The Promised Land, Kidnapped, Suffragette, Oppenheimer\n\nHORROR: A Haunting in Venice\n\nMYSTERY: Decision to Leave\n\nROMANCE: Pride &amp; Prejudice, Chii Tomodachi, Portrait of a Lady on Fire\n\nSCI-FI: Lola\n\nSHORT: Strange Way of Life, Ace Date\n\nTHRILLER: Monster, Guardians of the Formula, Death of the Little Match Girl, Anatomy of a Fall\n\nWAR: Lola, Sisu\n\nWESTERN: Strange Way of Life\n\n</pre>\n\n\n\n\n\n\n\n\n\n\n<p>Alright seeing this list, and even checking the list of the movies that are not Drama... makes me just more confused what this is supposed to be. Maybe I just lack the knowledge of the genres?</p>\n<p>Though... lets take the comedy as the example. I can not see how anybody would describe <a class=\"u-watch-of\" href=\"https://www.cd-cc.si/kultura/film/duse-otoka-banshees-inisherin\">The Banshees of Inisherin</a> as a comedy? And why is <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3544\">Lola</a> not on the list, even though the director of the movie described it as comedy? (I would put it there as well). Or something like <a class=\"u-watch-of\" href=\"https://www.liffe.si/urnik_2023/Film.aspx?idF=3607\">The Monk and the Gun</a>, which is just one big situational comedy?</p>\n<p>I know that I though <a class=\"u-watch-of\" href=\"https://www.kinodvor.org/film/oppenheimer/\">Oppenheimer</a> is a comedy. And that most people don't agree with me. But still I think they could include more movies there.</p>\n<p>There are many other comments that I could make, but lets leave it at that.</p>\n\n\n\n\n\n\n\n\n<h5>Duration of Movies<a href=\"https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/#Duration-of-Movies\">¶</a>\n</h5>\n\n\n\n\n\nIn [33]:\n\n\n<pre><span></span><span>sorted</span><span>([[</span><span>int</span><span>(</span><span>movie</span><span>[</span><span>'Runtime'</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\" min\"</span><span>,</span> <span>\"\"</span><span>)),</span> <span>movie</span><span>[</span><span>\"Title\"</span><span>]]</span> <span>for</span> <span>movie</span> <span>in</span> <span>movies_imdb</span><span>])</span>\n</pre>\n\n\n\n\n\n\nOut[33]:\n\n<pre>[[12, 'Ace Date'],\n [31, 'Strange Way of Life'],\n [79, 'Lola'],\n [80, 'Chii Tomodachi'],\n [83, 'Reality'],\n [91, 'Sisu'],\n [97, 'Sword Art Online: Progressive - Aria of a Starless Night'],\n [99, 'Mavka: The Forest Song'],\n [99, 'The Grand Budapest Hotel'],\n [101, 'Groundhog Day'],\n [102, 'Living'],\n [103, 'A Haunting in Venice'],\n [105, 'The Marvels'],\n [106, 'Suffragette'],\n [107, 'Asterix &amp; Obelix: Mission Cleopatra'],\n [107, 'The Monk and the Gun'],\n [109, 'Sepet Metulja'],\n [110, 'Lunana: A Yak in the Classroom'],\n [112, 'Gekijouban Isekai Quartet: Another World'],\n [112, 'Weathering with You'],\n [114, 'Barbie'],\n [114, 'Death of the Little Match Girl'],\n [114, 'The Banshees of Inisherin'],\n [117, 'Nostalgia'],\n [120, 'Alcarràs'],\n [120, 'Guardians of the Formula'],\n [122, 'Portrait of a Lady on Fire'],\n [123, 'Enola Holmes'],\n [125, 'A Quiet Passion'],\n [125, 'R.M.N.'],\n [126, 'Monster'],\n [127, 'The Promised Land'],\n [129, 'Enola Holmes 2'],\n [129, 'Pride &amp; Prejudice'],\n [131, 'Kubi'],\n [134, 'Gran Turismo'],\n [134, 'Kidnapped'],\n [137, 'A Royal Affair'],\n [139, 'Decision to Leave'],\n [151, 'Anatomy of a Fall'],\n [158, 'Napoleon'],\n [180, 'Oppenheimer']]</pre>\n\n\n\n\n\n\n\nIn [34]:\n\n\n<pre><span></span><span>durations</span> <span>=</span> <span>collections</span><span>.</span><span>Counter</span><span>([</span><span>math</span><span>.</span><span>floor</span><span>(</span><span>int</span><span>(</span><span>movie</span><span>[</span><span>'Runtime'</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\" min\"</span><span>,</span> <span>\"\"</span><span>))</span> <span>/</span> <span>10</span><span>)</span> <span>*</span> <span>10</span> <span>for</span> <span>movie</span> <span>in</span> <span>movies_imdb</span><span>])</span>\n<span>min_duration</span><span>,</span> <span>max_duration</span> <span>=</span> <span>min</span><span>(</span><span>durations</span><span>),</span> <span>max</span><span>(</span><span>durations</span><span>)</span>\n<span>pandas</span><span>.</span><span>DataFrame</span><span>(</span>\n    <span>[[</span><span>i</span><span>,</span> <span>durations</span><span>[</span><span>i</span><span>]]</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>min_duration</span><span>,</span> <span>max_duration</span> <span>+</span> <span>1</span><span>,</span> <span>10</span><span>)],</span> <span>columns</span><span>=</span><span>[</span><span>\"Duration\"</span><span>,</span> <span>\"Count\"</span><span>]</span>\n<span>)</span><span>.</span><span>plot</span><span>(</span><span>kind</span><span>=</span><span>\"bar\"</span><span>,</span> <span>x</span><span>=</span><span>\"Duration\"</span><span>,</span> <span>y</span><span>=</span><span>\"Count\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[34]:\n\n<pre>&lt;Axes: xlabel='Duration'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>For the last part I can analyse the duration of the movies. One cinema in my city have different ticket prices depending on the length of the movie. In their case the cutoff is the 120 minutes. The rest of them have different ticket prices for different movies, but I have not yet figured out the system of their price ticket.</p>\n<p>And it seems that the peak of the movies that I watch is just after the cutoff. Though the next ones are just below it. I wonder, if they correspond because of the bias my movie watching? Or are most movies around that time.</p>\n\n\n\n\n\n\n\n\n<p>I do have the data for more than just the movies that I watched, so why don't I check this?</p>\n\n\n\n\n\nIn [35]:\n\n\n<pre><span></span><span>all_movies_duration</span> <span>=</span> <span>collections</span><span>.</span><span>Counter</span><span>([</span>\n    <span>math</span><span>.</span><span>floor</span><span>(</span><span>int</span><span>(</span><span>movie</span><span>[</span><span>'Runtime'</span><span>]</span><span>.</span><span>replace</span><span>(</span><span>\" min\"</span><span>,</span> <span>\"\"</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>\"S\"</span><span>,</span> <span>\"\"</span><span>))</span> <span>/</span> <span>10</span><span>)</span> <span>*</span> <span>10</span> \n    <span>for</span> <span>_</span><span>,</span> <span>movie</span> <span>in</span> <span>movies_metadata</span><span>.</span><span>items</span><span>()</span> \n    <span>if</span> <span>movie</span><span>[</span><span>'Runtime'</span><span>]</span> <span>!=</span> <span>\"N/A\"</span>\n<span>])</span>\n<span>min_all_duration</span><span>,</span> <span>max_all_duration</span> <span>=</span> <span>min</span><span>(</span><span>all_movies_duration</span><span>),</span> <span>max</span><span>(</span><span>all_movies_duration</span><span>)</span>\n<span>pandas</span><span>.</span><span>DataFrame</span><span>(</span>\n    <span>[[</span><span>i</span><span>,</span> <span>all_movies_duration</span><span>[</span><span>i</span><span>]]</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>min_all_duration</span><span>,</span> <span>max_all_duration</span> <span>+</span> <span>1</span><span>,</span> <span>10</span><span>)],</span> <span>columns</span><span>=</span><span>[</span><span>\"Duration\"</span><span>,</span> <span>\"Count\"</span><span>]</span>\n<span>)</span><span>.</span><span>plot</span><span>(</span><span>kind</span><span>=</span><span>\"bar\"</span><span>,</span> <span>x</span><span>=</span><span>\"Duration\"</span><span>,</span> <span>y</span><span>=</span><span>\"Count\"</span><span>)</span>\n</pre>\n\n\n\n\n\n\nOut[35]:\n\n<pre>&lt;Axes: xlabel='Duration'&gt;</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>And it seems that the pick is below two hours. So I guess I am just biased to movies just on the cutoff.</p>",
      "text": "Analysis of the Movies I Watched¶\n\n\n\n\n\n\n\n\n\nThe conversation about movies microformats last month made me change my watched movies list in a way to include them. That means, that I now have this information structured in a way, that I can analyse it. So I decided to try to analyse the movies that I watched. Especially since I think this was the year that I watched more movies, than I normally do.\nAlso, my blogging platform does allow for using the Jupyter Notebooks as one of the blog posts formats. This and the corresponding book analysis could be a good test if this is something, that I could be including more frequently on my blog. I don't even know, how this post will look in the end.\n\n\n\n\n\n\n\n\nData Preparation¶\n\n\n\n\n\n\nIn [1]:\n\n\nimport requests\nimport collections\nimport geopandas\nimport pandas\nimport mf2py\nfrom shapely.geometry import Polygon, MultiPolygon\nimport math\n\n\n\n\n\n\n\nIn [2]:\n\n\nmovie_data = requests.get(\"http://0.0.0.0:8000/movies-and-series/\").text\nmovie_data_microformats = mf2py.parse(movie_data[movie_data.index('<h3>Movies</h3>'):movie_data.index('<h4>2022-12</h4>')], html_parser = \"lxml\")\n\n\n\n\n\n\n\n\n\n\nData Analysis¶\n\n\n\n\n\n\n\n\n\nNumber of Movies¶\n\n\n\n\n\n\nIn [3]:\n\n\nlen(movie_data_microformats['items'])\n\n\n\n\n\n\n\nOut[3]:\n\n42\n\n\n\n\n\n\n\n\n\n\nI have watched 42 movies in the last year.\nThis is the first full year, that I kept data off. But I am still sure, that I watched more movies than any year in recent years. I don't have the memory to compare this with my younger years.\nI think the reason for this way, that towards the end of the year, I have added the visit to the cinema as the accepted procrastination methods. So if I was not in the mode to do, what I wanted to do, visit to the cinema was a way to avoid this. And once I started to visit cinemas more, I saw more and more movies, that I wanted to watch. I still have one on the list from the last year, that is already in the cinema.\n\n\n\n\n\n\n\n\nPlaces I Watched Them¶\n\n\n\n\n\n\n\n\n\nIn the previous sections, I have mentioned that I have started to go to cinema more frequently. I do keep track of where I watch a specific movie, so it is possible to see this effect as well. I do it by saving the link to it, to I will need to parse it from the URL of each movie.\n\n\n\n\n\nIn [4]:\n\n\nmovie_location_map = {\n    \"liffe.si\": [\"Cinema\", \"Liffe\"],\n    \"cineplexx.si\": [\"Cinema\", \"Cineplexx\"],\n    \"kinodvor.org\": [\"Cinema\", \"Kinodvor\"],\n    \"cd-cc.si\": [\"Cinema\", \"Cankarjev Dom\"],\n    \"kinoteka.si\": [\"Cinema\", \"Kinoteka\"],\n    \"kino-bezigrad.si\": [\"Cinema\", \"Kino Bežigrad\"],\n    \"netflix.com\": [\"Streaming\", \"Netflix\"],\n    \"plus.cobiss.net\": [\"DVD\", \"Library\"],\n    \"crunchyroll.com\": [\"Streaming\", \"Crunchyroll\"],\n    \"instagram.com\": [\"Event\", \"DIH\"], # Only because I know which movie this is\n    \"theoutmuseum.org\": [\"Internet\"],\n    \"DVD\": [\"DVD\"]\n}\n\n\n\n\n\n\n\nIn [5]:\n\n\nmovies_locations = pandas.DataFrame.from_records(\n    collections.Counter([\n        movie_location_map[movie['properties'][\"location\"][0].replace(\"https://\", \"\").replace(\"www.\", \"\").split(\"/\")[0]][0]\n        for movie in movie_data_microformats[\"items\"]\n    ]).most_common(), columns = [\"Type of Location\", \"Count\"]\n)\n\n\n\n\n\n\n\nIn [6]:\n\n\nmovies_locations\n\n\n\n\n\n\n\nOut[6]:\n\n\nType of Location\nCount\n0\nCinema\n34\n1\nStreaming\n4\n2\nDVD\n2\n3\nEvent\n1\n4\nInternet\n1\n\n\n\n\n\n\n\nIn [7]:\n\n\nmovies_locations.sort_values(by=\"Count\").plot(kind = \"barh\", x=0, y=1, legend = False, color=\"blue\")\n\n\n\n\n\n\n\nOut[7]:\n\n<Axes: ylabel='Type of Location'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have to admit, I knew I watched a lot of movies in the cinema. I did not expects, that I watched such a overhelming majoirty of the movies there. :) I guess that means, that the cinema around me provide enough entertaimnet for me?\n\n\n\n\n\n\n\n\nI can check, how many movies did I watch in each cinema. For the Liffe\n(Ljubljana International Film Festival), I am providing the link to the\nfestival and not to the cinema in questions. So I will correct for this.\n\n\n\n\n\nIn [8]:\n\n\ncinema_movies_by_place = collections.Counter(\n    [\n        movie_location_map[\n            movie['properties'][\"location\"][0].replace(\"https://\", \"\").replace(\"www.\", \"\").split(\"/\")[0]\n        ][1]\n        for movie in movie_data_microformats[\"items\"]\n        if movie_location_map[\n            movie['properties'][\"location\"][0].replace(\"https://\", \"\").replace(\"www.\", \"\").split(\"/\")[0]\n        ][0] == \"Cinema\"\n    ]\n).most_common()\n\n\n\n\n\n\n\nIn [9]:\n\n\nliffe_correction = {  \n    'Kinodvor': 1,\n    'Cankarjev Dom': 3, \n    'Kino Bežigrad': 4,\n}\ncinema_movies_by_place_liffe_correction = pandas.DataFrame.from_records([\n    (place, count + liffe_correction[place]) \n    if place in liffe_correction \n    else (place, count) \n    for place, count in cinema_movies_by_place \n    if place != \"Liffe\"\n], columns=[\"Cinema\", \"Count\"]).sort_values(by=\"Count\", ascending=False).reset_index().drop(\"index\", axis=1)\n\n\n\n\n\n\n\nIn [10]:\n\n\ncinema_movies_by_place_liffe_correction\n\n\n\n\n\n\n\nOut[10]:\n\n\nCinema\nCount\n0\nKinodvor\n9\n1\nCankarjev Dom\n8\n2\nCineplexx\n7\n3\nKino Bežigrad\n6\n4\nKinoteka\n4\n\n\n\n\n\n\n\nIn [11]:\n\n\ncinema_movies_by_place_liffe_correction.sort_values(by=\"Count\").plot(kind = \"barh\",x=0,legend = False,color=\"blue\")\n\n\n\n\n\n\n\nOut[11]:\n\n<Axes: ylabel='Cinema'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI am not sure, how it is in larger cities... but here each of the cinemas have their flavour:\nKinodvor is the cinema, where you go see the international, usually non-Holywood movies. They are part of the European cinema network. They also organise movie screening at the castle each summer.\nCankarjev dom is not actually a cinema, but it is a main city cultural place. They do host the Liffe movie festival and have the Liffe after Liffe program, which I had last year. They pick six movies from the Liffe festival and then screen one per month in the first half of a year.\nCineplexx is a cinema about 10 minutes by foot from my home. They mostly screen the Slovenian and popular American movies.\nKino Bežigrad is usually screening popular American movies. But then it also participates as a venue in different movie festivals and hosts different thematic events, like Japanese movies week or similar. They also have movie watching from cars and in the pools, but I never went to any of them.\nKinoteka is mostly screening the non-current movies. Though the had the LGBT movie festival this year, and I watched one of the this year movies during it.\nI have to admit, that with my the convenience wins a lot of time. I would give priority to the movies, that I want to see. But if the movie is played in the multiple cinemas, a lot of times the more convenient cinema would win. I am trying to change that.\nI am also aware, how much the different events effect this. I would not have Kinodvor that high without their summer screening at the castle and I would not have Cankarjev Dom and Bežigrad lower or non-existent without the Liffe festival. I guess they know what they are doing to bring people to the cinema.\nOn the other hand, it was in the Cineplexx, where I had the experience to having the whole place for myself. I was the only one watching a specific movie for this showing. Felt a bit guilt of them having to play it just for me.\n\n\n\n\n\nIn [12]:\n\n\npandas.DataFrame(collections.Counter([\n    movie_location_map[movie['properties'][\"location\"][0].replace(\"https://\", \"\").replace(\"www.\", \"\").split(\"/\")[0]][1]\n    for movie in movie_data_microformats[\"items\"]\n    if movie_location_map[movie['properties'][\"location\"][0].replace(\"https://\", \"\").replace(\"www.\", \"\").split(\"/\")[0]][0] == \"Streaming\"\n]).most_common(), columns = [\"Streaming Service\", \"Count\"])\n\n\n\n\n\n\n\nOut[12]:\n\n\nStreaming Service\nCount\n0\nCrunchyroll\n2\n1\nNetflix\n2\n\n\n\n\n\n\n\n\n\n\nWhen I talk about movies and series at work, it seems all they watch is what is available on the streaming services. Usually Netflix. So I could so also the analysis of the streaming services, and you can see that I did not use it much for movie watching.\nHonestly, if I was not borrowing the Netflix password from somebody in my household, I don't think I would watch that either. Don't watch enough to b worth the subscription.\n\n\n\n\n\n\n\n\nYears, the Movies I Watched were Produced¶\n\n\n\n\n\n\n\n\n\nI can also analyse how much of a recent bias to I have for movies. Considering how high of a ratio of movies do I watch in the cinema, it should be really high. But lets check anyway.\n\n\n\n\n\nIn [13]:\n\n\nmovies_year_data = collections.Counter([int(movie['properties']['published'][0]) for movie in movie_data_microformats[\"items\"]])\n\n\n\n\n\n\n\nIn [14]:\n\n\npandas.DataFrame(movies_year_data.most_common(), columns=[\"Year\", \"Count\"])\n\n\n\n\n\n\n\nOut[14]:\n\n\nYear\nCount\n0\n2023\n17\n1\n2022\n13\n2\n2019\n3\n3\n2021\n1\n4\n2005\n1\n5\n2012\n1\n6\n2016\n1\n7\n2015\n1\n8\n2014\n1\n9\n2020\n1\n10\n1993\n1\n11\n2002\n1\n\n\n\n\n\n\n\nIn [15]:\n\n\npandas.DataFrame([\n    [year, movies_year_data[year]] \n    if year in movies_year_data \n    else [year, 0] \n    for year in list(range(min(movies_year_data.keys()), max(movies_year_data) + 1))\n], columns=[\"Year\", \"Count\"]).plot(kind=\"bar\", x=\"Year\", y=\"Count\", ylabel=\"Count\", xlabel=\"Year\")\n\n\n\n\n\n\n\nOut[15]:\n\n<Axes: xlabel='Year', ylabel='Count'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd as I expected, I had not watched a single movie produced before my birth and the majority of movies that I watched were produced in the last two years. I have a very strong recency bias, when it comes to movies - but then I expected that.\n\n\n\n\n\n\n\n\nLanguages the Movies I Watched were in¶\n\n\n\n\n\n\n\n\n\nI use media for language learning, so I keep track of the languages, that the movies were originally in and in which did I watched me. While movies are usually not the media I normally choose for this, I guess keeping track of that had become a habit.\nFor cinema movies, I generally take the language from their site. For the non-cinema movies, I take the language data from the IMDB. Not that the later is very... representative of what I want to track. For example, for the Italian movie Rapito (Kidnapped) had Italian as the main language. So the cinema page lists Italian as the language. The IMDB site of the same movie lists the Italian, Hebrew, and Latin - which were all the languages used in the movie.\nIn same cases, I would include multiple languages for the movie, since multiple have substantial role and it would not be the same movie, if everything was in the same language. One that example is Čuvari formule (Guardians of the Formula). It is a very subjective line to draw.\nBut I guess it is easier to just list all of them. And I guess I would need to be more careful of this in the future and not just copy them blindly?\n\n\n\n\n\nIn [16]:\n\n\nmovies_lang = collections.Counter(\n    sum([\n        movie['properties'][\"dub\"][0].split(\", \") \n        if \"dub\" in movie['properties']\n        else movie['properties']['language'][0].split(\", \") \n        for movie in movie_data_microformats[\"items\"]\n    ], [])\n)\nlen(movies_lang)\n\n\n\n\n\n\n\nOut[16]:\n\n16\n\n\n\n\n\n\n\nIn [17]:\n\n\npandas.DataFrame(movies_lang.most_common(), columns=[\"Language\", \"Number of Movies\"])\n\n\n\n\n\n\n\nOut[17]:\n\n\nLanguage\nNumber of Movies\n0\nEnglish\n24\n1\nFrench\n7\n2\nJapanese\n6\n3\nGerman\n3\n4\nDanish\n2\n5\nSlovenian\n2\n6\nDzongkha\n2\n7\nItalian\n2\n8\nSerbian\n1\n9\nFinish\n1\n10\nCroatian\n1\n11\nRomanian\n1\n12\nHungarian\n1\n13\nCatalan\n1\n14\nSpanish\n1\n15\nKorean\n1\n\n\n\n\n\n\n\nIn [18]:\n\n\npandas.DataFrame(\n    movies_lang.most_common(), columns=[\"Language\", \"Number of Movies\"]\n).sort_values(by=\"Number of Movies\").plot(kind=\"barh\", x=\"Language\")\n\n\n\n\n\n\n\nOut[18]:\n\n<Axes: ylabel='Language'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOver half of the movies that I watched were in English. But I also watched movies in the 16 different language - it is just that most languages had a very small amount of movies, they were present in. I was sort of hoping, that English would be less representative. But I guess the English speaking world still holds predominance in the movie world.\nI am surprised that French was that high. But the movies that I watched in French were normally a good ones. So I guess it makes sense.\n\n\n\n\n\nIn [19]:\n\n\ncollections.Counter([\n    (movie['properties']['language'][0], movie['properties'][\"dub\"][0]) \n    for movie in movie_data_microformats[\"items\"] \n    if \"dub\" in movie['properties']\n])\n\n\n\n\n\n\n\nOut[19]:\n\nCounter({('English', 'Slovenian'): 1})\n\n\n\n\n\n\n\n\n\n\nThere was just one movie, that I watched dubbed. And even that one was a mistake. I misread the cinema listing and I though it was going to be in the Ukrainian - since it was an Ukrainian animation movie. On the end I watched it in Slovenian, and found out that the original was in English. Not sure why, but I guess it was the whole war thing going on? Hard to film there and hard to find the voice actors with the language skills elsewhere?\n\n\n\n\n\n\n\n\nCountries the Movies were Associated with¶\n\n\n\n\n\n\n\n\n\nI am actually not sure, how they decide which country the movie is from. The short research seems to indicate, that it is the places, where productions houses have their headquarters? And it might have something to do with financing? Not sure about the last part. If it is in this direction, it is a bit of a stupid metric?\nStill, I was interested in the predominance of the English speaking films in the previous section. So I wanted to see also the countries, from where these movies were from.\n\n\n\n\n\n\n\n\nPreparing the Country Data¶\n\n\n\n\n\n\n\n\n\nIn order to to this, I first want to make a couple of correction to the maps data. For example, the Asian map looks weird without the Russian and the European looks weird with it. Even though I do count Russian as part of Europe, I am visualising it as part of Asia for the aesthetics purposes.\nAlso, I needed to remove a couple of islands from some countries for the purpose of aesthetics.\n\n\n\n\n\nIn [36]:\n\n\ncountries = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\n\n\n\n\n\n\n\n\n\n/tmp/ipykernel_26224/1046189302.py:1: FutureWarning: The geopandas.dataset module is deprecated and will be removed in GeoPandas 1.0. You can get the original 'naturalearth_lowres' data from https://www.naturalearthdata.com/downloads/110m-cultural-vectors/.\n  countries = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\n\n\n\n\n\n\n\n\nIn [21]:\n\n\ncountries.at[countries[countries[\"name\"] == \"Russia\"][\"continent\"].index[0],\"continent\"] = \"Asia\"\n\ncountries.at[countries[countries[\"name\"] == \"France\"][\"continent\"].index[0],\"geometry\"] = MultiPolygon([\n    countries[countries[\"name\"] == \"France\"].explode(index_parts=True)[\"geometry\"].iloc[1],\n    countries[countries[\"name\"] == \"France\"].explode(index_parts=True)[\"geometry\"].iloc[2]\n])\n\ncountries.at[countries[countries[\"name\"] == \"Russia\"][\"continent\"].index[0],\"geometry\"] = MultiPolygon([\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[0],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[1],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[2],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[3],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[4],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[5],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[6],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[7],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[8],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[9],\n    countries[countries[\"name\"] == \"Russia\"].explode(index_parts=True)[\"geometry\"].iloc[10]\n])\n\ncountries.at[countries[countries[\"name\"] == \"Norway\"][\"continent\"].index[0],\"geometry\"] = MultiPolygon([\n    countries[countries[\"name\"] == \"Norway\"].explode(index_parts=True)[\"geometry\"].iloc[1]\n])\n\n\n\n\n\n\n\n\n\n\nAlso some of the countries names in the visualisation package and in my data do not agree. So I need to map the difference from one to another and check, if any one is still missing from there.\n\n\n\n\n\nIn [22]:\n\n\ncountry_geopandas_mapper = {\n    \"Bosnia and Herzegovina\": \"Bosnia and Herz.\",\n    \"United States\": \"United States of America\",\n    \"Butan\": \"Bhutan\",\n    'Czech Republic': \"Czechia\",\n}\n\n\n\n\n\n\n\nIn [23]:\n\n\nall_countries_count = collections.defaultdict(int)\nfor movie in movie_data_microformats[\"items\"]:\n    movie_countries = movie[\"properties\"]['countries'][0].split(\",\")\n    for country in movie_countries:\n        country = country.strip()\n        if country in country_geopandas_mapper:\n            country = country_geopandas_mapper[country]\n        all_countries_count[country] += 1\n\n\n\n\n\n\n\nIn [24]:\n\n\nset(all_countries_count.keys()).difference(set(countries[countries[\"name\"].isin(all_countries_count.keys())][\"name\"]))\n\n\n\n\n\n\n\nOut[24]:\n\nset()\n\n\n\n\n\n\n\n\n\n\nVisualising the Data¶\n\n\n\n\n\n\nIn [25]:\n\n\nlen(all_countries_count)\n\n\n\n\n\n\n\nOut[25]:\n\n25\n\n\n\n\n\n\n\nIn [26]:\n\n\npandas.DataFrame(all_countries_count.items(), columns=['Country', 'Count']).sort_values(by=\"Count\", ascending\n=False).reset_index().drop(\"index\", axis=1)\n\n\n\n\n\n\n\nOut[26]:\n\n\nCountry\nCount\n0\nUnited States of America\n13\n1\nUnited Kingdom\n13\n2\nFrance\n10\n3\nJapan\n7\n4\nGermany\n5\n5\nItaly\n4\n6\nSweden\n3\n7\nMontenegro\n2\n8\nBhutan\n2\n9\nDenmark\n2\n10\nIreland\n2\n11\nSlovenia\n2\n12\nSpain\n2\n13\nNorth Macedonia\n1\n14\nUkraine\n1\n15\nCzechia\n1\n16\nFinland\n1\n17\nNorway\n1\n18\nSerbia\n1\n19\nTaiwan\n1\n20\nCroatia\n1\n21\nBosnia and Herz.\n1\n22\nRomania\n1\n23\nChina\n1\n24\nSouth Korea\n1\n\n\n\n\n\n\n\nIn [27]:\n\n\nax = countries.plot(color=\"grey\")\nax.axis('off')\ncolors = [\n    (0, 0, 1 - (all_countries_count[c] / max(all_countries_count.values()) * 0.7)) \n    for c in countries[\"name\"] \n    if c in all_countries_count\n]\ncountries[countries[\"name\"].isin(all_countries_count.keys())].plot(ax=ax, color=colors)\n\n\n\n\n\n\n\nOut[27]:\n\n<Axes: >\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have watched movies from 25 different countries. That makes is what... a bit above 10% of all countries. Still the US and UK dominate the charts.\nAlso from the map it can be clearly seen, that I have a string northern hemisphere bias. I generally do not try to watch a varied movies. I watch the movies, that I think I will like based on the description and maybe trailer. But from a lot of parts of the world, they are only bringing the movies with romance or living situation (what is book world would be described as literary book). Something, that I usually avoid.\nThough I did enjoy the two Bhutan movies I watched, even though they could be described as the living situation ones. But I would consider both of the comedy. Especially The Monk and the Gun. But honestly, bring us some more shooters like the 범죄도시2 or Sisu. Or comedies like 血いともだち. Or mysteries like Anatomie d’une chute. Or animations and so on.\nSometimes I have the feeling like there is some sort of bias. That people either watch the popular US movies or they watch the literal movies from the rest of the world. I would very much like to watch the genre movies from the rest of the world.\n\n\n\n\n\n\n\n\nThere is also the visualisation of the countries per continent.\n\n\n\n\n\nIn [28]:\n\n\ncontinents = countries[countries[\"name\"].isin(all_countries_count.keys())][\"continent\"]\n\nfor continent in set(continents):\n    countinent_countries = countries[countries[\"continent\"] == continent]\n    ax = countinent_countries.plot(color=\"grey\")\n    ax.axis('off')\n    colors = [(0, 0, 1 - (all_countries_count[c] / max(all_countries_count.values()) * 0.7)) for c in countinent_countries[countinent_countries[\"name\"].isin(all_countries_count.keys())][\"name\"]]\n    countinent_countries[countinent_countries[\"name\"].isin(all_countries_count.keys())].plot(ax=ax, color=colors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIMDB Data Collection¶\n\n\n\n\n\n\n\n\n\nBecause of the movie project I recently started, I now have the IMDB data for all the movies there as part of the site. Which means, that I can use it and I can have some more metadata from there as well. Even if I don't always agree with their metadata.\n\n\n\n\n\n\n\n\nPreparing the data¶\n\n\n\n\n\n\nIn [29]:\n\n\nmovies_metadata = requests.get(\"http://0.0.0.0:8000/projects/indieweb-movies/movies_imdb_data.json\").json()\n\n\n\n\n\n\n\nIn [30]:\n\n\nmovies_imdb = [\n    next(\n        movies_metadata[url.replace(\"https://www.imdb.com/title/\", \"\").replace(\"/\", \"\") ]\n        for url in movie[\"properties\"][\"url\"] \n        if \"www.imdb.com\" in url\n    )\n    for movie in movie_data_microformats[\"items\"]\n]\n\n\n\n\n\n\n\n\n\n\nGenres of the Movies¶\n\n\n\n\n\n\nIn [31]:\n\n\npandas.DataFrame(\n    collections.Counter(sum([movie['Genre'].split(\", \") for movie in movies_imdb], [])).most_common(), columns=[\"Genre\", \"Count\"]\n)\n\n\n\n\n\n\n\nOut[31]:\n\n\nGenre\nCount\n0\nDrama\n28\n1\nAdventure\n10\n2\nComedy\n9\n3\nAction\n8\n4\nHistory\n7\n5\nCrime\n7\n6\nFantasy\n6\n7\nBiography\n5\n8\nAnimation\n4\n9\nThriller\n4\n10\nRomance\n3\n11\nShort\n2\n12\nWar\n2\n13\nFamily\n2\n14\nWestern\n1\n15\nSci-Fi\n1\n16\nHorror\n1\n17\nMystery\n1\n\n\n\n\n\n\n\n\n\n\nThe first thing that I could analyse is the genre of the movies I watch. To tell you the truth, I am not sure what the drama was supposed to indicate. It apparently describes over half of the movies, that I had watched. So I also wanted to see, what movies are included in each of the genres.\n\n\n\n\n\nIn [32]:\n\n\nfor genre in sorted(list(set(sum([movie['Genre'].split(\", \") for movie in movies_imdb], [])))):\n    print(genre.upper() + \": \" + \", \".join([movie[\"Title\"] for movie in movies_imdb if genre in movie['Genre']]))\n    print(\"\")\n\n\n\n\n\n\n\n\n\nACTION: Sword Art Online: Progressive - Aria of a Starless Night, Napoleon, The Marvels, Kubi, Sisu, Gran Turismo, Enola Holmes 2, Enola Holmes\n\nADVENTURE: Sword Art Online: Progressive - Aria of a Starless Night, Napoleon, The Marvels, Mavka: The Forest Song, Gran Turismo, Barbie, The Grand Budapest Hotel, Enola Holmes 2, Enola Holmes, Asterix & Obelix: Mission Cleopatra\n\nANIMATION: Sword Art Online: Progressive - Aria of a Starless Night, Gekijouban Isekai Quartet: Another World, Mavka: The Forest Song, Weathering with You\n\nBIOGRAPHY: A Royal Affair, Napoleon, The Promised Land, A Quiet Passion, Oppenheimer\n\nCOMEDY: Gekijouban Isekai Quartet: Another World, Mavka: The Forest Song, Chii Tomodachi, Barbie, The Grand Budapest Hotel, Ace Date, The Banshees of Inisherin, Groundhog Day, Asterix & Obelix: Mission Cleopatra\n\nCRIME: Death of the Little Match Girl, A Haunting in Venice, The Grand Budapest Hotel, Anatomy of a Fall, Enola Holmes 2, Enola Holmes, Decision to Leave\n\nDRAMA: Pride & Prejudice, A Royal Affair, Strange Way of Life, Monster, Guardians of the Formula, Sepet Metulja, Kubi, Reality, The Promised Land, The Monk and the Gun, Kidnapped, A Quiet Passion, Death of the Little Match Girl, Gran Turismo, Suffragette, A Haunting in Venice, Portrait of a Lady on Fire, Oppenheimer, Nostalgia, Anatomy of a Fall, Living, R.M.N., Alcarràs, Lunana: A Yak in the Classroom, The Banshees of Inisherin, Weathering with You, Groundhog Day, Decision to Leave\n\nFAMILY: Lunana: A Yak in the Classroom, Asterix & Obelix: Mission Cleopatra\n\nFANTASY: Gekijouban Isekai Quartet: Another World, The Marvels, Chii Tomodachi, Barbie, Weathering with You, Groundhog Day\n\nHISTORY: A Royal Affair, Guardians of the Formula, Kubi, The Promised Land, Kidnapped, Suffragette, Oppenheimer\n\nHORROR: A Haunting in Venice\n\nMYSTERY: Decision to Leave\n\nROMANCE: Pride & Prejudice, Chii Tomodachi, Portrait of a Lady on Fire\n\nSCI-FI: Lola\n\nSHORT: Strange Way of Life, Ace Date\n\nTHRILLER: Monster, Guardians of the Formula, Death of the Little Match Girl, Anatomy of a Fall\n\nWAR: Lola, Sisu\n\nWESTERN: Strange Way of Life\n\n\n\n\n\n\n\n\n\n\n\n\nAlright seeing this list, and even checking the list of the movies that are not Drama... makes me just more confused what this is supposed to be. Maybe I just lack the knowledge of the genres?\nThough... lets take the comedy as the example. I can not see how anybody would describe The Banshees of Inisherin as a comedy? And why is Lola not on the list, even though the director of the movie described it as comedy? (I would put it there as well). Or something like The Monk and the Gun, which is just one big situational comedy?\nI know that I though Oppenheimer is a comedy. And that most people don't agree with me. But still I think they could include more movies there.\nThere are many other comments that I could make, but lets leave it at that.\n\n\n\n\n\n\n\n\nDuration of Movies¶\n\n\n\n\n\n\nIn [33]:\n\n\nsorted([[int(movie['Runtime'].replace(\" min\", \"\")), movie[\"Title\"]] for movie in movies_imdb])\n\n\n\n\n\n\n\nOut[33]:\n\n[[12, 'Ace Date'],\n [31, 'Strange Way of Life'],\n [79, 'Lola'],\n [80, 'Chii Tomodachi'],\n [83, 'Reality'],\n [91, 'Sisu'],\n [97, 'Sword Art Online: Progressive - Aria of a Starless Night'],\n [99, 'Mavka: The Forest Song'],\n [99, 'The Grand Budapest Hotel'],\n [101, 'Groundhog Day'],\n [102, 'Living'],\n [103, 'A Haunting in Venice'],\n [105, 'The Marvels'],\n [106, 'Suffragette'],\n [107, 'Asterix & Obelix: Mission Cleopatra'],\n [107, 'The Monk and the Gun'],\n [109, 'Sepet Metulja'],\n [110, 'Lunana: A Yak in the Classroom'],\n [112, 'Gekijouban Isekai Quartet: Another World'],\n [112, 'Weathering with You'],\n [114, 'Barbie'],\n [114, 'Death of the Little Match Girl'],\n [114, 'The Banshees of Inisherin'],\n [117, 'Nostalgia'],\n [120, 'Alcarràs'],\n [120, 'Guardians of the Formula'],\n [122, 'Portrait of a Lady on Fire'],\n [123, 'Enola Holmes'],\n [125, 'A Quiet Passion'],\n [125, 'R.M.N.'],\n [126, 'Monster'],\n [127, 'The Promised Land'],\n [129, 'Enola Holmes 2'],\n [129, 'Pride & Prejudice'],\n [131, 'Kubi'],\n [134, 'Gran Turismo'],\n [134, 'Kidnapped'],\n [137, 'A Royal Affair'],\n [139, 'Decision to Leave'],\n [151, 'Anatomy of a Fall'],\n [158, 'Napoleon'],\n [180, 'Oppenheimer']]\n\n\n\n\n\n\n\nIn [34]:\n\n\ndurations = collections.Counter([math.floor(int(movie['Runtime'].replace(\" min\", \"\")) / 10) * 10 for movie in movies_imdb])\nmin_duration, max_duration = min(durations), max(durations)\npandas.DataFrame(\n    [[i, durations[i]] for i in range(min_duration, max_duration + 1, 10)], columns=[\"Duration\", \"Count\"]\n).plot(kind=\"bar\", x=\"Duration\", y=\"Count\")\n\n\n\n\n\n\n\nOut[34]:\n\n<Axes: xlabel='Duration'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor the last part I can analyse the duration of the movies. One cinema in my city have different ticket prices depending on the length of the movie. In their case the cutoff is the 120 minutes. The rest of them have different ticket prices for different movies, but I have not yet figured out the system of their price ticket.\nAnd it seems that the peak of the movies that I watch is just after the cutoff. Though the next ones are just below it. I wonder, if they correspond because of the bias my movie watching? Or are most movies around that time.\n\n\n\n\n\n\n\n\nI do have the data for more than just the movies that I watched, so why don't I check this?\n\n\n\n\n\nIn [35]:\n\n\nall_movies_duration = collections.Counter([\n    math.floor(int(movie['Runtime'].replace(\" min\", \"\").replace(\"S\", \"\")) / 10) * 10 \n    for _, movie in movies_metadata.items() \n    if movie['Runtime'] != \"N/A\"\n])\nmin_all_duration, max_all_duration = min(all_movies_duration), max(all_movies_duration)\npandas.DataFrame(\n    [[i, all_movies_duration[i]] for i in range(min_all_duration, max_all_duration + 1, 10)], columns=[\"Duration\", \"Count\"]\n).plot(kind=\"bar\", x=\"Duration\", y=\"Count\")\n\n\n\n\n\n\n\nOut[35]:\n\n<Axes: xlabel='Duration'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd it seems that the pick is below two hours. So I guess I am just biased to movies just on the cutoff."
    },
    "mention-of": "https://www.benji.dog/notes/1702019418/",
    "wm-property": "mention-of",
    "wm-private": false,
    "rels": {
      "canonical": "https://sarajaksa.eu/2024/01/analysis-of-movies-i-watched/"
    }
  }
]